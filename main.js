/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={135:function(t,e,n){(function(){"use strict";var t="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){return t==Array.prototype||t==Object.prototype||(t[e]=n.value),t},e=function(t){t=["object"==typeof globalThis&&globalThis,t,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof n.g&&n.g];for(var e=0;e<t.length;++e){var r=t[e];if(r&&r.Math==Math)return r}throw Error("Cannot find global object")}(this),r="function"==typeof Object.assign?Object.assign:function(t,e){for(var n=1;n<arguments.length;n++){var r=arguments[n];if(r)for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(t[i]=r[i])}return t};!function(n,r){if(r)t:{var i=e;n=n.split(".");for(var o=0;o<n.length-1;o++){var s=n[o];if(!(s in i))break t;i=i[s]}(r=r(o=i[n=n[n.length-1]]))!=o&&null!=r&&t(i,n,{configurable:!0,writable:!0,value:r})}}("Object.assign",(function(t){return t||r}));var i=this||self,o={facingMode:"user",width:640,height:480};function s(t,e){this.video=t,this.h=0,this.g=Object.assign(Object.assign({},o),e)}function a(t){window.requestAnimationFrame((function(){!function(t){var e=null;t.video.paused||t.video.currentTime===t.h||(t.h=t.video.currentTime,e=t.g.onFrame()),e?e.then((function(){a(t)})):a(t)}(t)}))}s.prototype.start=function(){var t=this;return navigator.mediaDevices&&navigator.mediaDevices.getUserMedia||alert("No navigator.mediaDevices.getUserMedia exists."),this.g,navigator.mediaDevices.getUserMedia({video:!0}).then((function(e){!function(t,e){t.video.srcObject=e,t.video.onloadedmetadata=function(){t.video.play(),a(t)}}(t,e)})).catch((function(t){throw console.error("Failed to acquire camera feed: "+t),alert("Failed to acquire camera feed: "+t),t}))};var u,c=["Camera"],h=i;c[0]in h||void 0===h.execScript||h.execScript("var "+c[0]);for(;c.length&&(u=c.shift());)c.length||void 0===s?h=h[u]&&h[u]!==Object.prototype[u]?h[u]:h[u]={}:h[u]=s}).call(this)},187:t=>{"use strict";var e,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};e=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var i=Number.isNaN||function(t){return t!=t};function o(){o.init.call(this)}t.exports=o,t.exports.once=function(t,e){return new Promise((function(n,r){function i(n){t.removeListener(e,o),r(n)}function o(){"function"==typeof t.removeListener&&t.removeListener("error",i),n([].slice.call(arguments))}v(t,e,o,{once:!0}),"error"!==e&&function(t,e,n){"function"==typeof t.on&&v(t,"error",e,{once:!0})}(t,i)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var s=10;function a(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function u(t){return void 0===t._maxListeners?o.defaultMaxListeners:t._maxListeners}function c(t,e,n,r){var i,o,s,c;if(a(n),void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),o=t._events),s=o[e]),void 0===s)s=o[e]=n,++t._eventsCount;else if("function"==typeof s?s=o[e]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(i=u(t))>0&&s.length>i&&!s.warned){s.warned=!0;var h=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");h.name="MaxListenersExceededWarning",h.emitter=t,h.type=e,h.count=s.length,c=h,console&&console.warn&&console.warn(c)}return t}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function f(t,e,n){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},i=h.bind(r);return i.listener=n,r.wrapFn=i,i}function l(t,e,n){var r=t._events;if(void 0===r)return[];var i=r[e];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(i):m(i,i.length)}function d(t){var e=this._events;if(void 0!==e){var n=e[t];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function m(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t[r];return n}function v(t,e,n,r){if("function"==typeof t.on)r.once?t.once(e,n):t.on(e,n);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function i(o){r.once&&t.removeEventListener(e,i),n(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(t){if("number"!=typeof t||t<0||i(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");s=t}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||i(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},o.prototype.getMaxListeners=function(){return u(this)},o.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var i="error"===t,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var s;if(e.length>0&&(s=e[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var u=o[t];if(void 0===u)return!1;if("function"==typeof u)r(u,this,e);else{var c=u.length,h=m(u,c);for(n=0;n<c;++n)r(h[n],this,e)}return!0},o.prototype.addListener=function(t,e){return c(this,t,e,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(t,e){return c(this,t,e,!0)},o.prototype.once=function(t,e){return a(e),this.on(t,f(this,t,e)),this},o.prototype.prependOnceListener=function(t,e){return a(e),this.prependListener(t,f(this,t,e)),this},o.prototype.removeListener=function(t,e){var n,r,i,o,s;if(a(e),void 0===(r=this._events))return this;if(void 0===(n=r[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===e||n[o].listener===e){s=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,i),1===n.length&&(r[t]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",t,s||e)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(t){var e,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;r>=0;r--)this.removeListener(t,e[r]);return this},o.prototype.listeners=function(t){return l(this,t,!0)},o.prototype.rawListeners=function(t){return l(this,t,!1)},o.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):d.call(t,e)},o.prototype.listenerCount=d,o.prototype.eventNames=function(){return this._eventsCount>0?e(this._events):[]}},946:function(t,e){!function(t){"use strict";function e(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function n(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,r(t,e)}function r(t,e){return(r=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function i(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var o="\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec4 a_position;\nattribute vec4 a_normal;\nattribute vec2 a_texcoord;\nattribute vec4 a_color;\n\nvarying vec4 v_position;\nvarying vec4 v_normal;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\n",s="\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec4 v_position;\nvarying vec4 v_normal;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\n",a="#version 300 es\n\nprecision mediump float;\n\nin vec4 a_position;\nin vec4 a_normal;\nin vec2 a_texcoord;\nin vec4 a_color;\n\nout vec4 v_position;\nout vec4 v_normal;\nout vec2 v_texcoord;\nout vec4 v_color;\n",u="#version 300 es\n\nprecision mediump float;\n\nin vec4 v_position;\nin vec4 v_normal;\nin vec2 v_texcoord;\nin vec4 v_color;\n\nout vec4 outColor;\n",c="\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_modelViewMatrix;\nuniform mat4 u_normalMatrix;\n\nuniform vec2 u_resolution;\nuniform float u_time;\n",h="\nvoid main() {\n\tv_position = a_position;\n\tv_normal = a_normal;\n\tv_texcoord = a_texcoord;\n\tv_color = a_color;\n\tgl_Position = a_position;\n}\n",f="\nvoid main(void) {\n\tv_position = u_projectionMatrix * u_modelViewMatrix * a_position;\n\tv_normal = u_normalMatrix * a_normal;\n\tv_texcoord = a_texcoord;\n\tv_color = a_color;\n\tgl_Position = v_position;\n}\n",l=o+c+f,d=a+c+f,m=s+c+"\nvoid main() {\n\tvec2 st = gl_FragCoord.xy / u_resolution.xy;\n\tst.x *= u_resolution.x / u_resolution.y;\n\tvec3 color = vec3(\n\t\tabs(cos(u_time * 0.1)) * st.y,\n\t\tabs(cos(u_time * 0.2)) * st.y,\n\t\tabs(sin(u_time)) * st.y\n\t);\n\tgl_FragColor = vec4(color, 1.0);\n}\n",v=u+c+"\nvoid main() {\n\tvec2 st = gl_FragCoord.xy / u_resolution.xy;\n\tst.x *= u_resolution.x / u_resolution.y;\n\tvec3 color = vec3(\n\t\tabs(cos(u_time * 0.1)) * st.y,\n\t\tabs(cos(u_time * 0.2)) * st.y,\n\t\tabs(sin(u_time)) * st.y\n\t);\n\toutColor = vec4(color, 1.0);\n}\n",p=s+c+"\nvoid main() {\n\tvec2 uv = v_texcoord;\n\tvec3 color = vec3(\n\t\tabs(cos(u_time * 0.1)) * uv.y,\n\t\tabs(cos(u_time * 0.2)) * uv.y,\n\t\tabs(sin(u_time)) * uv.y\n\t);\n\tfloat incidence = max(dot(v_normal.xyz, vec3(0.0, 1.0, 0.0)), 0.0);\n\tvec3 light = vec3(0.2) + (vec3(1.0) * incidence);\n\tgl_FragColor = vec4(v_color.rgb * color * light, 1.0);\n}\n",g=u+c+"\nvoid main() {\n\tvec2 uv = v_texcoord;\n\tvec3 color = vec3(\n\t\tabs(cos(u_time * 0.1)) * uv.y,\n\t\tabs(cos(u_time * 0.2)) * uv.y,\n\t\tabs(sin(u_time)) * uv.y\n\t);\n\tfloat incidence = max(dot(v_normal.xyz, vec3(0.0, 1.0, 0.0)), 0.0);\n\tvec3 light = vec3(0.2) + (vec3(1.0) * incidence);\n\toutColor = vec4(v_color.rgb * color * light, 1.0);\n}\n",_=o+c+h,y=a+c+h,x=s+c+"\nvoid main(){\n\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}",b=u+c+"\nvoid main() {\n\toutColor = vec4(0.0, 0.0, 0.0, 1.0);\n}\n";var E=setTimeout;function T(t){return Boolean(t&&void 0!==t.length)}function U(){}function w(t){if(!(this instanceof w))throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],S(t,this)}function M(t,e){for(;3===t._state;)t=t._value;0!==t._state?(t._handled=!0,w._immediateFn((function(){var n=1===t._state?e.onFulfilled:e.onRejected;if(null!==n){var r;try{r=n(t._value)}catch(t){return void L(e.promise,t)}A(e.promise,r)}else(1===t._state?A:L)(e.promise,t._value)}))):t._deferreds.push(e)}function A(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var n=e.then;if(e instanceof w)return t._state=3,t._value=e,void F(t);if("function"==typeof n)return void S((r=n,i=e,function(){r.apply(i,arguments)}),t)}t._state=1,t._value=e,F(t)}catch(e){L(t,e)}var r,i}function L(t,e){t._state=2,t._value=e,F(t)}function F(t){2===t._state&&0===t._deferreds.length&&w._immediateFn((function(){t._handled||w._unhandledRejectionFn(t._value)}));for(var e=0,n=t._deferreds.length;e<n;e++)M(t,t._deferreds[e]);t._deferreds=null}function R(t,e,n){this.onFulfilled="function"==typeof t?t:null,this.onRejected="function"==typeof e?e:null,this.promise=n}function S(t,e){var n=!1;try{t((function(t){n||(n=!0,A(e,t))}),(function(t){n||(n=!0,L(e,t))}))}catch(t){if(n)return;n=!0,L(e,t)}}w.prototype.catch=function(t){return this.then(null,t)},w.prototype.then=function(t,e){var n=new this.constructor(U);return M(this,new R(t,e,n)),n},w.prototype.finally=function(t){var e=this.constructor;return this.then((function(n){return e.resolve(t()).then((function(){return n}))}),(function(n){return e.resolve(t()).then((function(){return e.reject(n)}))}))},w.all=function(t){return new w((function(e,n){if(!T(t))return n(new TypeError("Promise.all accepts an array"));var r=Array.prototype.slice.call(t);if(0===r.length)return e([]);var i=r.length;function o(t,s){try{if(s&&("object"==typeof s||"function"==typeof s)){var a=s.then;if("function"==typeof a)return void a.call(s,(function(e){o(t,e)}),n)}r[t]=s,0==--i&&e(r)}catch(t){n(t)}}for(var s=0;s<r.length;s++)o(s,r[s])}))},w.allSettled=function(t){return new this((function(e,n){if(!t||void 0===t.length)return n(new TypeError(typeof t+" "+t+" is not iterable(cannot read property Symbol(Symbol.iterator))"));var r=Array.prototype.slice.call(t);if(0===r.length)return e([]);var i=r.length;function o(t,n){if(n&&("object"==typeof n||"function"==typeof n)){var s=n.then;if("function"==typeof s)return void s.call(n,(function(e){o(t,e)}),(function(n){r[t]={status:"rejected",reason:n},0==--i&&e(r)}))}r[t]={status:"fulfilled",value:n},0==--i&&e(r)}for(var s=0;s<r.length;s++)o(s,r[s])}))},w.resolve=function(t){return t&&"object"==typeof t&&t.constructor===w?t:new w((function(e){e(t)}))},w.reject=function(t){return new w((function(e,n){n(t)}))},w.race=function(t){return new w((function(e,n){if(!T(t))return n(new TypeError("Promise.race accepts an array"));for(var r=0,i=t.length;r<i;r++)w.resolve(t[r]).then(e,n)}))},w._immediateFn="function"==typeof setImmediate&&function(t){setImmediate(t)}||function(t){E(t,0)},w._unhandledRejectionFn=function(t){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",t)};var P,O=function(){function t(){}return t.fetch=function(t){return new Promise((function(e,n){var r=new XMLHttpRequest;r.onload=function(){e(r.response||r.responseText)},r.onerror=function(e){console.log("Common.error",e),n(new Error("Network request failed for url "+t))},r.ontimeout=function(e){n(new Error("Network request failed for url "+t))},r.onabort=function(){n(new Error("Aborted"))},r.open("GET",t,!0),r.send(null)}))},t.getResource=function(e,n){return void 0===n&&(n=""),-1===e.indexOf(":/")?t.join(n,e):e},t.join=function(){for(var e=[],n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return r.forEach((function(n){0===n.indexOf("/")&&(e=[]),t.comps(n).forEach((function(t){switch(t){case".":break;case"..":e.pop();break;default:e.push(t)}}))})),e.join("/")},t.dirname=function(e){var n=t.comps(e);return n.pop(),n.join("/")},t.comps=function(t){return t.replace(/\/$/,"").split(/\/+/)},t}();!function(t){t[t.None=0]="None",t[t.Error=1]="Error",t[t.Warn=2]="Warn",t[t.Log=3]="Log"}(P||(P={}));var C,B,D,I=function(){function t(){}return t.log=function(){var e;t.enabled&&t.level>=P.Log&&(e=console).log.apply(e,arguments)},t.warn=function(){var e;t.enabled&&t.level>=P.Warn&&(e=console).warn.apply(e,arguments)},t.error=function(){var e;t.enabled&&t.level>=P.Error&&(e=console).error.apply(e,arguments)},t}();I.level=P.Warn,I.enabled=!0,(D=t.ContextVersion||(t.ContextVersion={})).WebGl="webgl",D.WebGl2="webgl2",function(t){t.LowP="lowp",t.MediumP="mediump",t.HighP="highp"}(C||(C={})),function(t){t.Flat="flat",t.Box="box",t.Sphere="sphere",t.Torus="torus",t.Mesh="mesh"}(B||(B={}));var k,G={webgl:{flat:{vertex:l,fragment:m},mesh:{vertex:l,fragment:p}},webgl2:{flat:{vertex:d,fragment:v},mesh:{vertex:d,fragment:g}}};(k=t.ContextError||(t.ContextError={}))[k.BrowserSupport=1]="BrowserSupport",k[k.Other=2]="Other";var j=function(){},N=function(){function e(){}return e.getContext_=function(t,e){for(var n=["webgl","experimental-webgl"],r=null,i=0;i<n.length;++i)try{r=t.getContext(n[i],e)}catch(t){if(r)break}return r},e.getContext2_=function(t,e){var n=null;try{n=t.getContext("webgl2",e)}catch(t){}return n},e.getFragmentVertex=function(t,n){var r;return n&&(e.isWebGl2(t)&&(n=n.replace(/^\#version\s*300\s*es\s*\n/,"")),null!==/(?:^\s*)((?:#if|#elif)(?:\s*)(defined\s*\(\s*VERTEX)(?:\s*\))|(?:#ifdef)(?:\s*VERTEX)(?:\s*))/gm.exec(n)&&(r=e.isWebGl2(t)?"#version 300 es\n#define VERTEX\n"+n:"#define VERTEX\n"+n)),r},e.getIncludes=function(t,n){if(void 0===n&&(n=""),void 0===t)return Promise.resolve(t);for(var r,i=/#include\s*['|"](.*.glsl)['|"]/gm,o=[],s=0,a=function(){o.push(Promise.resolve(t.slice(s,r.index))),s=r.index+r[0].length;var i=r[1],a=O.getResource(i,n),u=-1===i.indexOf(":/")?O.dirname(a):"";o.push(O.fetch(a).then((function(t){return e.getIncludes(t,u)})))};null!==(r=i.exec(t));)a();return o.push(Promise.resolve(t.slice(s))),Promise.all(o).then((function(t){return t.join("")}))},e.isWebGl=function(t){return t instanceof WebGLRenderingContext},e.isWebGl2=function(t){return window.WebGL2RenderingContext&&t instanceof WebGL2RenderingContext},e.inferVersion=function(e,n){var r=e||n;return r&&0===r.indexOf("#version 300 es")?t.ContextVersion.WebGl2:t.ContextVersion.WebGl},e.inferPrecision=function(t){var n=t.match(/precision\s+(.+)\s+float/);return n&&n.length>1&&(e.precision=n[1]),e.precision},e.versionDiffers=function(n,r,i){if(n){var o=this.isWebGl2(n)?t.ContextVersion.WebGl2:t.ContextVersion.WebGl;return e.inferVersion(r,i)!==o}return!1},e.getBufferVertex=function(t){return this.isWebGl2(t)?y:_},e.getVertex=function(t,e,n){if(void 0===n&&(n=B.Flat),t)return t;var r=this.inferVersion(t,e);return G[r][n===B.Flat?"flat":"mesh"].vertex},e.getFragment=function(t,e,n){if(void 0===n&&(n=B.Flat),e)return e;var r=this.inferVersion(t,e);return G[r][n===B.Flat?"flat":"mesh"].fragment},e.tryInferContext=function(n,r,i,o,s,a){function u(t,e){if("function"==typeof a)a(t);else{var n=i.parentNode;n&&(n.innerHTML='<div class="glsl-canvas--error">'+e+"</div>")}}if(void 0===s&&(s=[]),!WebGLRenderingContext)return u(t.ContextError.BrowserSupport,'This page requires a browser that supports WebGL.<br/>\n\t\t\t<a href="http://get.webgl.org">Click here to upgrade your browser.</a>'),null;var c=e.inferContext(n,r,i,o);if(c){this.isWebGl2(c)||-1!==s.indexOf("OES_standard_derivatives")||s.push("OES_standard_derivatives");var h=c.getSupportedExtensions();s.forEach((function(t){-1!==h.indexOf(t)?c.getExtension(t):I.warn("GlslCanvas "+t+" not supported")}))}else u(t.ContextError.Other,'It does not appear your computer can support WebGL.<br/>\n\t\t\t<a href="http://get.webgl.org/troubleshooting/">Click here for more information.</a>');return c},e.tryGetContext=function(n,r,i){function o(t,e){if("function"==typeof i)i(t);else{var r=n.parentNode;r&&(r.innerHTML='<div class="glsl-canvas--error">'+e+"</div>")}}if(!WebGLRenderingContext)return o(t.ContextError.BrowserSupport,'This page requires a browser that supports WebGL.<br/>\n\t\t\t<a href="http://get.webgl.org">Click here to upgrade your browser.</a>'),null;var s=e.getContext_(n,r);return s?s.getExtension("OES_standard_derivatives"):o(t.ContextError.Other,'It does not appear your computer can support WebGL.<br/>\n\t\t\t<a href="http://get.webgl.org/troubleshooting/">Click here for more information.</a>'),s},e.inferContext=function(e,n,r,i){return this.inferVersion(e,n)===t.ContextVersion.WebGl2?this.getContext2_(r,i):this.getContext_(r,i)},e.createShader=function(t,n,r,i){void 0===i&&(i=0);var o=t.createShader(r);if(n=n.replace(/precision\s+(.+)\s+float/,"precision "+e.precision+" float"),t.shaderSource(o,n),t.compileShader(o),!t.getShaderParameter(o,t.COMPILE_STATUS))throw e.lastError=t.getShaderInfoLog(o),I.error("*** Error compiling shader: "+e.lastError),t.deleteShader(o),{shader:o,source:n,type:r,error:e.lastError,offset:i};return o},e.createProgram=function(t,n,r,i){for(var o=t.createProgram(),s=0;s<n.length;++s)t.attachShader(o,n[s]);if(r&&i)for(var a=0;a<r.length;++a)t.bindAttribLocation(o,i?i[a]:a,r[a]);return t.linkProgram(o),t.validateProgram(o),t.getProgramParameter(o,t.LINK_STATUS)?(t.useProgram(o),o):(e.lastError=t.getProgramInfoLog(o),I.error("Error in program linking: "+e.lastError),t.deleteProgram(o),null)},e.createVertexBuffers=function(t,e){var n=new j,r=t.getAttribLocation(e,"a_texcoord");n.texcoord=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,n.texcoord),t.bufferData(t.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),t.STATIC_DRAW),t.enableVertexAttribArray(r),t.vertexAttribPointer(r,2,t.FLOAT,!1,0,0);var i=t.getAttribLocation(e,"a_position");return n.position=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,n.position),t.bufferData(t.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1]),t.STATIC_DRAW),t.enableVertexAttribArray(i),t.vertexAttribPointer(i,2,t.FLOAT,!1,0,0),n},e}();N.precision=C.MediumP,N.lastError="";var W,V=function(){},z=function(){function t(){this.values=new V}var e=t.prototype;return e.has=function(t){return t in this.values},e.set=function(t,e){this.values[t]=e},e.get=function(t){return this.values[t]},e.forEach=function(t){var e=this,n=0;Object.keys(this.values).forEach((function(r){t(e.values[r],n,e.values),n++}))},e.reduce=function(t,e){var n=this,r=e,i=0;return Object.keys(this.values).forEach((function(e){r=t(r,n.values[e],i,n.values),i++})),r},t}(),X=function(){function t(t){t&&(Object.assign(this,t),this.positions&&(this.size=this.positions.length/3))}var e=t.prototype;return e.create=function(t,e){this.createData_(),this.createAttributes_(t,e)},e.createBufferData_=function(t,e,n){var r=t.createBuffer();return t.bindBuffer(e,r),t.bufferData(e,n,t.STATIC_DRAW),r},e.createAttribLocation_=function(t,e,n,r,i){var o=t.getAttribLocation(e,n);return t.enableVertexAttribArray(o),t.vertexAttribPointer(o,r,i,!1,0,0),o},e.createAttributes_=function(t,e){this.positions&&(this.positionBuffer=this.createBufferData_(t,t.ARRAY_BUFFER,new Float32Array(this.positions)),this.positionLocation=this.createAttribLocation_(t,e,"a_position",this.positions.length/this.size,t.FLOAT),t.bindAttribLocation(e,this.positionLocation,"a_position")),this.texcoords&&(this.texcoordBuffer=this.createBufferData_(t,t.ARRAY_BUFFER,new Float32Array(this.texcoords)),this.texcoordLocation=this.createAttribLocation_(t,e,"a_texcoord",this.texcoords.length/this.size,t.FLOAT),t.bindAttribLocation(e,this.texcoordLocation,"a_texcoord")),this.normals&&(this.normalBuffer=this.createBufferData_(t,t.ARRAY_BUFFER,new Float32Array(this.normals)),this.normalLocation=this.createAttribLocation_(t,e,"a_normal",this.normals.length/this.size,t.FLOAT),t.bindAttribLocation(e,this.normalLocation,"a_normal")),this.colors&&(this.colorBuffer=this.createBufferData_(t,t.ARRAY_BUFFER,new Float32Array(this.colors)),this.colorLocation=this.createAttribLocation_(t,e,"a_color",this.colors.length/this.size,t.FLOAT),t.bindAttribLocation(e,this.colorLocation,"a_color"))},e.attachAttributes_=function(t,e){var n;this.positions&&(n=t.getAttribLocation(e,"a_position"),t.enableVertexAttribArray(n),t.bindBuffer(t.ARRAY_BUFFER,this.positionBuffer),t.vertexAttribPointer(n,this.positions.length/this.size,t.FLOAT,!1,0,0)),this.texcoords&&(n=t.getAttribLocation(e,"a_texcoord"),t.enableVertexAttribArray(this.texcoordLocation),t.bindBuffer(t.ARRAY_BUFFER,this.texcoordBuffer),t.vertexAttribPointer(this.texcoordLocation,this.texcoords.length/this.size,t.FLOAT,!1,0,0)),this.normals&&(n=t.getAttribLocation(e,"a_normal"),t.enableVertexAttribArray(this.normalLocation),t.bindBuffer(t.ARRAY_BUFFER,this.normalBuffer),t.vertexAttribPointer(this.normalLocation,this.normals.length/this.size,t.FLOAT,!1,0,0)),this.colors&&(n=t.getAttribLocation(e,"a_color"),t.enableVertexAttribArray(this.colorLocation),t.bindBuffer(t.ARRAY_BUFFER,this.colorBuffer),t.vertexAttribPointer(this.colorLocation,this.colors.length/this.size,t.FLOAT,!1,0,0))},e.bindAttributes_=function(t,e){this.positions&&t.bindAttribLocation(e,this.positionLocation,"a_position"),this.texcoords&&t.bindAttribLocation(e,this.texcoordLocation,"a_texcoord"),this.normals&&t.bindAttribLocation(e,this.normalLocation,"a_normal"),this.colors&&t.bindAttribLocation(e,this.colorLocation,"a_color")},e.createData_=function(){this.positions=[],this.normals=[],this.texcoords=[],this.colors=[],this.size=0},t.fromIndices=function(t,e,n){var r=[];return t.forEach((function(t){r.push.apply(r,e.slice(t*n,t*n+n))})),r},t}(),H=function(t){function e(){return t.apply(this,arguments)||this}return n(e,t),e.prototype.createData_=function(){this.size=6,this.positions=[-1,-1,0,1,-1,0,1,1,0,-1,-1,0,1,1,0,-1,1,0],this.texcoords=[0,0,1,0,1,1,0,0,1,1,0,1],this.normals=[0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1],this.colors=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},e}(X);(W=t.BufferFloatType||(t.BufferFloatType={}))[W.FLOAT=0]="FLOAT",W[W.HALF_FLOAT=1]="HALF_FLOAT";var Y=function(){function e(t,n,r,i){var o=t.createFramebuffer(),s=e.getTexture(t,n,r,i);t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),this.texture=s,this.buffer=o,this.BW=n,this.BH=r,this.index=i}return e.getFloatType=function(t){return N.isWebGl2(t)&&t.getExtension("EXT_color_buffer_float")||t.getExtension("OES_texture_float")?t.FLOAT:null},e.getHalfFloatType=function(t){var e;return N.isWebGl2(t)&&(e=t.getExtension("EXT_color_buffer_half_float")||t.getExtension("EXT_color_buffer_float"))?t.HALF_FLOAT:(e=t.getExtension("OES_texture_half_float"))&&e.HALF_FLOAT_OES||null},e.getInternalFormat=function(t){return N.isWebGl2(t)?t.RGBA16F:t.RGBA},e.getType=function(n){return e.type===t.BufferFloatType.HALF_FLOAT?e.getHalfFloatType(n)||(e.type=t.BufferFloatType.FLOAT,e.getType(n)):e.getFloatType(n)||(e.type=t.BufferFloatType.HALF_FLOAT,e.getType(n))},e.getTexture=function(n,r,i,o){var s=e.getInternalFormat(n),a=n.RGBA,u=e.getType(n),c=n.createTexture();return n.activeTexture(n.TEXTURE0+o),n.bindTexture(n.TEXTURE_2D,c),n.texImage2D(n.TEXTURE_2D,0,s,r,i,0,a,u,null),n.checkFramebufferStatus(n.FRAMEBUFFER)!==n.FRAMEBUFFER_COMPLETE?(e.type===t.BufferFloatType.FLOAT?e.type=t.BufferFloatType.HALF_FLOAT:e.type=t.BufferFloatType.FLOAT,e.getTexture(n,r,i,o)):c},e.prototype.resize=function(t,n,r){if(n!==this.BW||r!==this.BH){var i=this.buffer,o=this.texture,s=this.index;t.bindFramebuffer(t.FRAMEBUFFER,i);var a,u=t.checkFramebufferStatus(t.FRAMEBUFFER),c=Math.min(n,this.BW),h=Math.min(r,this.BH),f=e.getType(t);u===t.FRAMEBUFFER_COMPLETE&&(a=new Float32Array(c*h*4),t.readPixels(0,0,c,h,t.RGBA,f,a)),t.bindFramebuffer(t.FRAMEBUFFER,null);var l=s+1,d=e.getTexture(t,n,r,l);f=e.getType(t),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),a&&t.texSubImage2D(t.TEXTURE_2D,0,0,0,c,h,t.RGBA,f,a);var m=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(o),t.activeTexture(t.TEXTURE0+s),t.bindTexture(t.TEXTURE_2D,d),this.index=s,this.texture=d,this.buffer=m,this.BW=n,this.BH=r}},e}();Y.type=t.BufferFloatType.HALF_FLOAT;var q=function(){function t(t,e,n,r){this.isValid=!1,this.index=t,this.key=e,this.vertexString=n,this.fragmentString=r,this.geometry=new H}var e=t.prototype;return e.create=function(t,e,n){var r=N.createShader(t,this.vertexString,t.VERTEX_SHADER),i=N.createShader(t,this.fragmentString,t.FRAGMENT_SHADER,1);i?this.isValid=!0:(i=N.createShader(t,N.isWebGl2(t)?b:x,t.FRAGMENT_SHADER),this.isValid=!1);var o=N.createProgram(t,[r,i]);if(!o)return this.isValid=!1,t.deleteShader(r),void t.deleteShader(i);this.geometry.create(t,o),t.deleteShader(r),t.deleteShader(i);var s=new Y(t,e,n,this.index+0),a=new Y(t,e,n,this.index+2);this.program=o,this.input=s,this.output=a},e.render=function(t,e,n){t.useProgram(this.program),t.bindFramebuffer(t.FRAMEBUFFER,this.output.buffer),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,this.output.texture,0),t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE&&(t.clearColor(0,0,0,1),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT)),t.viewport(0,0,e,n),t.drawArrays(t.TRIANGLES,0,this.geometry.size);var r=this.input;this.input=this.output,this.output=r},e.resize=function(t,e,n){t.useProgram(this.program),t.viewport(0,0,e,n),this.input.resize(t,e,n),this.output.resize(t,e,n)},e.destroy=function(t){t.deleteProgram(this.program),this.program=null,this.input=null,this.output=null},t}(),K=function(t){function r(){return t.apply(this,arguments)||this}return n(r,t),r.getBuffers=function(t,e,n){var i=new r,o=0;if(e){N.isWebGl2(t)&&(e=e.replace(/^\#version\s*300\s*es\s*\n/,""));for(var s,a=/(?:^\s*)((?:#if|#elif)(?:\s*)(defined\s*\(\s*BUFFER_)(\d+)(?:\s*\))|(?:#ifdef)(?:\s*BUFFER_)(\d+)(?:\s*))/gm;null!==(s=a.exec(e));){var u=s[3]||s[4],c="u_buffer"+u,h=N.isWebGl2(t)?"#version 300 es\n#define BUFFER_"+u+"\n"+e:"#define BUFFER_"+u+"\n"+e,f=new q(o,c,n,h);if(f.create(t,t.drawingBufferWidth,t.drawingBufferHeight),!f.program)throw"buffer error "+c;i.set(c,f),o+=4}}return i},i=r,(o=[{key:"count",get:function(){return 4*Object.keys(this.values).length}}])&&e(i.prototype,o),s&&e(i,s),r;var i,o,s}(z),$=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.isVector2=!0,this.x=t,this.y=e}var e=t.prototype;return e.copy=function(t){return this.x=t.x,this.y=t.y,this},e.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},e.normalize=function(){return this.divideScalar(this.length()||1)},e.divideScalar=function(t){return this.multiplyScalar(1/t)},e.multiplyScalar=function(t){return this.x*=t,this.y*=t,this},e.subVectors=function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this},e.addVectors=function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this},t}(),J=function(){function t(t,e,n){void 0===t&&(t=0),void 0===e&&(e=0),void 0===n&&(n=0),this.isVector3=!0,this.x=t,this.y=e,this.z=n}var e=t.prototype;return e.copy=function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this},e.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},e.normalize=function(){return this.divideScalar(this.length()||1)},e.divideScalar=function(t){return this.multiplyScalar(1/t)},e.multiplyScalar=function(t){return this.x*=t,this.y*=t,this.z*=t,this},e.subVectors=function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this},e.addVectors=function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this},e.crossVectors=function(t,e){var n=t.x,r=t.y,i=t.z,o=e.x,s=e.y,a=e.z;return this.x=r*a-i*s,this.y=i*o-n*a,this.z=n*s-r*o,this},t}(),Q=Math.PI/180,Z=function(t){function e(e,n,r){var i;return(i=t.call(this)||this).position=new J,i.value=new Float32Array([0,0,0]),i.mouse=null,i.dirty=!1,i.theta=(e||0)*Q,i.phi=(n||0)*Q,i.radius=r||6,i}n(e,t);var r=e.prototype;return r.down=function(t,e){this.mouse=new $(t,e)},r.move=function(t,e){var n=this.mouse;if(n&&(n.x!==t||n.y!==e)){var r=180*(t-n.x)*Q,i=180*(e-n.y)*Q;n.x=t,n.y=e,this.theta+=r,this.phi=Math.max(-60*Q,Math.min(60*Q,this.phi+i))}},r.up=function(){this.mouse=null},r.wheel=function(t){this.radius=Math.max(4,Math.min(10,this.radius+.02*t))},e.fromVector=function(t){var n=t.length();return new e(Math.acos(t.y/n),Math.atan(t.x/t.z),n)},e.toArray=function(t){var e=Math.sin(t.phi)*t.radius;return[e*Math.sin(t.theta),Math.cos(t.phi)*t.radius,e*Math.cos(t.theta)]},e}(J),tt="undefined"!=typeof Float32Array?Float32Array:Array;function et(){var t=new tt(16);return tt!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function nt(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function rt(t,e,n,r){var i,o,s,a,u,c,h,f,l,d,m,v,p,g,_,y,x,b,E,T,U,w,M,A,L=r[0],F=r[1],R=r[2],S=Math.hypot(L,F,R);return S<1e-6?null:(L*=S=1/S,F*=S,R*=S,i=Math.sin(n),s=1-(o=Math.cos(n)),a=e[0],u=e[1],c=e[2],h=e[3],f=e[4],l=e[5],d=e[6],m=e[7],v=e[8],p=e[9],g=e[10],_=e[11],y=L*L*s+o,x=F*L*s+R*i,b=R*L*s-F*i,E=L*F*s-R*i,T=F*F*s+o,U=R*F*s+L*i,w=L*R*s+F*i,M=F*R*s-L*i,A=R*R*s+o,t[0]=a*y+f*x+v*b,t[1]=u*y+l*x+p*b,t[2]=c*y+d*x+g*b,t[3]=h*y+m*x+_*b,t[4]=a*E+f*T+v*U,t[5]=u*E+l*T+p*U,t[6]=c*E+d*T+g*U,t[7]=h*E+m*T+_*U,t[8]=a*w+f*M+v*A,t[9]=u*w+l*M+p*A,t[10]=c*w+d*M+g*A,t[11]=h*w+m*M+_*A,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var it,ot,st=function(){function t(){this.delay=0,this.current=0,this.delta=0,this.paused=!1,this.start=this.previous=this.now()}var e=t.prototype;return e.now=function(){return performance.now()},e.play=function(){if(this.previous){var t=this.now();this.delay+=t-this.previous,this.previous=t}this.paused=!1},e.pause=function(){this.paused=!0},e.next=function(){var t=this.now();return this.delta=t-this.previous,this.current=t-this.start-this.delay,this.previous=t,this},t}(),at=function(t,e){this.event=t,this.callback=e},ut=function(){function t(){this.listeners=new Set}var e=t.prototype;return e.logListeners=function(){this.listeners.forEach((function(t){return I.log(t)}))},e.subscribe=function(t){this.listeners.add(t)},e.unsubscribe=function(t){this.listeners.delete(t)},e.unsubscribeAll=function(){this.listeners.clear()},e.on=function(t,e){return this.listeners.add(new at(t,e)),this},e.off=function(t,e){var n=this;return e?this.listeners.delete(new at(t,e)):this.listeners.forEach((function(e){e.event===t&&n.listeners.delete(e)})),this},e.trigger=function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return this.listeners.forEach((function(e){e.event===t&&"function"==typeof e.callback&&e.callback.apply(e,n)})),this},t}(),ct=function(t){function e(){return t.apply(this,arguments)||this}return n(e,t),e.prototype.createData_=function(){this.size=36,this.positions=[-1,-1,1,1,-1,1,1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,1,1,1,1,1,-1,1,-1,1,1,1,1,1,-1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,-1,-1,1,1,1,1,-1,1,-1,-1,-1,-1,-1,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,-1],this.texcoords=[0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1],this.normals=[0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0];for(var t=[[1,1,1,1],[1,0,0,1],[0,1,0,1],[0,0,1,1],[1,1,0,1],[1,0,1,1]],e=[],n=0;n<t.length;++n){var r=t[n];e=e.concat(r,r,r,r,r,r)}this.colors=e},e}(X),ht=function(t){function e(){return t.apply(this,arguments)||this}return n(e,t),e.prototype.createData_=function(){var t,e,n=2*Math.PI,r=Math.PI,i=new J,o=new J,s=[],a=[],u=[],c=[],h=[],f=Math.min(0+r,Math.PI),l=0,d=[];for(e=0;e<=60;e++){var m=[],v=e/60,p=0;for(0==e?p=.5/80:60==e&&f==Math.PI&&(p=-.5/80),t=0;t<=80;t++){var g=t/80;i.x=-1.4*Math.cos(0+g*n)*Math.sin(0+v*r),i.y=1.4*Math.cos(0+v*r),i.z=1.4*Math.sin(0+g*n)*Math.sin(0+v*r),a.push(i.x,i.y,i.z),o.copy(i).normalize(),u.push(o.x,o.y,o.z);var _=g+p,y=1-v;c.push(_,y),h.push(1,1,1,1),m.push(l++)}d.push(m)}for(e=0;e<60;e++)for(t=0;t<80;t++){var x=d[e][t+1],b=d[e][t],E=d[e+1][t],T=d[e+1][t+1];0!==e&&s.push(x,b,T),(59!==e||f<Math.PI)&&s.push(b,E,T)}this.size=s.length,this.positions=X.fromIndices(s,a,3),this.texcoords=X.fromIndices(s,c,2),this.normals=X.fromIndices(s,u,3),this.colors=X.fromIndices(s,h,4)},e}(X),ft=function(t){function e(){return t.apply(this,arguments)||this}n(e,t);var r=e.prototype;return r.createData_=function(){for(var t=200,e=40,n=[],r=[],i=[],o=[],s=[],a=new J,u=new J,c=new J,h=new J,f=new J,l=new J,d=new J,m=0;m<=t;++m){var v=m/t*2*Math.PI*2;this.calculatePositionOnCurve(v,2,3,1,c),this.calculatePositionOnCurve(v+.01,2,3,1,h),l.subVectors(h,c),d.addVectors(h,c),f.crossVectors(l,d),d.crossVectors(f,l),f.normalize(),d.normalize();for(var p=0;p<=e;++p){var g=p/e*Math.PI*2,_=-.25*Math.cos(g),y=.25*Math.sin(g);a.x=c.x+(_*d.x+y*f.x),a.y=c.y+(_*d.y+y*f.y),a.z=c.z+(_*d.z+y*f.z),r.push(a.x,a.y,a.z),u.subVectors(a,c).normalize(),i.push(u.x,u.y,u.z),o.push(m/t*2*Math.round(3)),o.push(p/e),s.push(1,1,1,1)}}for(var x=1;x<=t;x++)for(var b=1;b<=e;b++){var E=41*(x-1)+(b-1),T=41*x+(b-1),U=41*x+b,w=41*(x-1)+b;n.push(E,T,w),n.push(T,U,w)}this.size=n.length,this.positions=X.fromIndices(n,r,3),this.texcoords=X.fromIndices(n,o,2),this.normals=X.fromIndices(n,i,3),this.colors=X.fromIndices(n,s,4)},r.calculatePositionOnCurve=function(t,e,n,r,i){var o=Math.cos(t),s=Math.sin(t),a=n/e*t,u=Math.cos(a);i.x=r*(2+u)*.5*o,i.y=r*(2+u)*s*.5,i.z=r*Math.sin(a)*.5},e}(X),lt=[[1,1,1],[1,0,0],[0,1,0],[0,0,1],[1,1,0],[0,1,1]],dt=0,mt=function(){function t(){}var e=t.prototype;return e.load=function(t){var e=this;return new Promise((function(n,r){O.fetch(t).then((function(i){var o=e.parse(i);if(o.positions.length){var s=new X(o);n(s)}else r("ObjLoader error: empty positions "+t)}),(function(e){console.log("ObjLoader error:",e,t),r(e)}))}))},e.parseIndices=function(t,e,n,r,i,o){for(var s=0;s<=t.length-3;){var a=void 0,u=void 0,c=void 0;0===s?(a=s,u=s+1,c=s+2):(a=s-1,u=s+1,c=s+2),s++;for(var h=[a,u,c],f=0;f<h.length;f++){var l=t[h[f]][e],d=void 0;l&&NaN!==l&&(d=r[l-1])&&(d=d.slice(0,n),i.push.apply(i,d))}}},e.parseFaces=function(t,e,n,r,i,o,s,a){var u=this,c=i.length;t.forEach((function(t){u.parseIndices(t,0,3,e,i,"positions"),u.parseIndices(t,2,3,n,o,"normals"),u.parseIndices(t,1,2,r,s,"texcoords")}));var h=i.length-c;h>0&&(new Array(h/3).fill(0).forEach((function(){var t=lt[dt%lt.length];a.push(t[0],t[1],t[2],1)})),dt++)},e.parse=function(t){var e=this,n=[],r=[],i=[],o=[];dt=0;var s=[],a=[],u=[],c=[];-1!==t.indexOf("\r\n")&&(t=t.replace(/\r\n/g,"\n")),(t=t.replace(/  /g," ")).split("\n").forEach((function(t,h){if(0===t.indexOf("v ")){c.length&&(e.parseFaces(c,s,a,u,n,r,i,o),c=[]);var f=t.replace("v","").trim().split(" ").map((function(t){return parseFloat(t)}));s.push(f)}else if(0===t.indexOf("vn ")){var l=t.replace("vn","").trim().split(" ").map((function(t){return parseFloat(t)})),d=new J(l[0],l[1],l[2]).normalize();a.push([d.x,d.y,d.z])}else if(0===t.indexOf("vt ")){var m=t.replace("vt","").trim().split(" ").map((function(t){return parseFloat(t)}));u.push(m)}else if(0===t.indexOf("f ")){var v=t.replace("f","").trim().split(" ").map((function(t){var e=t.split("/").map((function(t){return parseInt(t)}));return 2===e.length&&e.push(null),e}));c[c.length]=v}})),c.length&&this.parseFaces(c,s,a,u,n,r,i,o);for(var h={min:new J(Number.POSITIVE_INFINITY),max:new J(Number.NEGATIVE_INFINITY)},f=0;f<n.length;f+=3)h.min.x=Math.min(h.min.x,n[f]),h.min.y=Math.min(h.min.y,n[f+1]),h.min.z=Math.min(h.min.z,n[f+2]),h.max.x=Math.max(h.max.x,n[f]),h.max.y=Math.max(h.max.y,n[f+1]),h.max.z=Math.max(h.max.z,n[f+2]);for(var l=-(h.min.x+h.max.x)/2,d=-(h.min.y+h.max.y)/2,m=-(h.min.z+h.max.z)/2,v=0;v<n.length;v+=3)n[v]+=l,n[v+1]+=d,n[v+2]+=m;var p=n.reduce((function(t,e){return Math.max(t,e)}),0);return n.forEach((function(t,e){return n[e]=t/p*2})),r.length||(r=n.slice()),i.length||(i=this.unrapUvw(n)),{positions:n,normals:r,texcoords:i,colors:o}},e.unrapUvw=function(t){for(var e=[],n=0;n<t.length;n+=3){var r=new J(t[n],t[n+1],t[n+2]);r.normalize();var i=Math.asin(-r.y),o=Math.atan2(r.x,r.z),s=.5+i/Math.PI,a=.5+o/(2*Math.PI);e.push(s,a)}return e},t}(),vt=["jpg","jpeg","png"],pt=["ogv","webm","mp4"],gt=vt.concat(pt);function _t(t){return"data"in t&&"width"in t&&"height"in t}(ot=t.TextureSourceType||(t.TextureSourceType={}))[ot.Data=0]="Data",ot[ot.Element=1]="Element",ot[ot.Url=2]="Url",(it=t.TextureFilteringType||(t.TextureFilteringType={})).MipMap="mipmap",it.Linear="linear",it.Nearest="nearest";var yt,xt,bt=function(e){function r(n,r,i,o,s){var a;return void 0===o&&(o={filtering:t.TextureFilteringType.Linear}),(a=e.call(this)||this).valid=!1,a.dirty=!1,a.animated=!1,a.powerOf2=!1,a.key=r,a.index=i,a.options=o,a.workpath=s,a.create(n),a}n(r,e),r.isPowerOf2=function(t){return 0==(t&t-1)},r.isSafari=function(){return/^((?!chrome|android).)*safari/i.test(navigator.userAgent)},r.isTextureUrl=function(t){return t&&/\.(jpg|jpeg|png|ogv|webm|mp4)$/i.test(t.split("?")[0])},r.isTexture=function(t){return void 0!==r.getTextureOptions(t)},r.getMaxTextureSize=function(t){return t.getParameter(t.MAX_TEXTURE_SIZE)},r.getTextureOptions=function(t,e){if(void 0===e&&(e={}),"string"==typeof t&&""!==t){if(r.isTextureUrl(t))return e.url=t,-1!==t.indexOf("?")&&(e=t.split("?")[1].split("&").reduce((function(t,e){var n=e.split("="),r=decodeURIComponent(n[0]),i=decodeURIComponent(n[1]);switch(r){case"filtering":t[r]=i;break;case"repeat":case"UNPACK_FLIP_Y_WEBGL":t[r]=Boolean(i);break;case"UNPACK_PREMULTIPLY_ALPHA_WEBGL":case"TEXTURE_WRAP_S":case"TEXTURE_WRAP_T":t[r]=Number(i)}return t}),e)),e;document&&(t=document.querySelector(t))}return t instanceof HTMLCanvasElement||t instanceof HTMLImageElement||t instanceof HTMLVideoElement?(e.element=t,e):_t(t)?(e.data=t.data,e.width=t.width,e.height=t.height,e):null};var i=r.prototype;return i.create=function(t){this.texture=t.createTexture(),this.texture&&(this.valid=!0),this.setData(t,1,1,new Uint8Array([0,0,0,0]),this.options)},i.load=function(t,e){return void 0===e&&(e={}),this.options=e,"string"==typeof e.url?void 0===this.url||e.url!==this.url?this.setUrl(t,e.url,e):Promise.resolve(this):e.element?this.setElement(t,e.element,e):e.data&&e.width&&e.height?this.setData(t,e.width,e.height,e.data,e):Promise.reject(this)},i.setUrl=function(e,n,i){if(void 0===i&&(i={}),!this.valid)return Promise.reject(this);this.url=n,this.source=n,this.sourceType=t.TextureSourceType.Url,this.options=Object.assign(this.options,i);var o,s,a=n.split("?")[0].split(".").pop().toLowerCase(),u=-1!==pt.indexOf(a),c=O.getResource(n,this.workpath);return u?(I.log("GlslCanvas.setUrl video",c),(o=document.createElement("video")).setAttribute("preload","auto"),o.setAttribute("loop","true"),o.setAttribute("muted","true"),o.setAttribute("playsinline","true"),o.loop=!0,o.muted=!0,s=this.setElement(e,o,i),o.src=c,o.addEventListener("canplay",(function(){o.play()}))):(I.log("GlslCanvas.setUrl image",c),o=document.createElement("img"),s=this.setElement(e,o,i),r.isSafari()&&"data:"===n.slice(0,5)||(o.crossOrigin="anonymous"),o.src=c),s},i.setElement=function(e,n,r){var i=this;return void 0===r&&(r={}),r=this.options=Object.assign(this.options,r),new Promise((function(o,s){var a=n;if("string"==typeof n&&(n=document.querySelector(n)),n instanceof HTMLCanvasElement||n instanceof HTMLImageElement||n instanceof HTMLVideoElement)if(i.source=n,i.sourceType=t.TextureSourceType.Element,n instanceof HTMLVideoElement){var u=n;u.addEventListener("loadeddata",(function(t){i.update(e,r),i.setFiltering(e,r),o(i)})),u.addEventListener("error",(function(t){s(t)})),u.load()}else n instanceof HTMLImageElement?(n.addEventListener("load",(function(){i.update(e,r),i.setFiltering(e,r),o(i)})),n.addEventListener("error",(function(t){s(t)}))):(i.update(e,r),i.setFiltering(e,r),o(i));else{var c="the 'element' parameter (`element: "+JSON.stringify(a)+"`) must be a CSS selector string, or a <canvas>, <image> or <video> object";I.log("Texture '"+i.key+"': "+c,r),s(c)}}))},i.setData=function(e,n,r,i,o){return void 0===o&&(o={}),this.width=n,this.height=r,this.options=Object.assign(this.options,o),this.source=i,this.sourceType=t.TextureSourceType.Data,this.update(e,o),this.setFiltering(e,o),Promise.resolve(this)},i.update=function(e,n){if(this.valid){if(e.activeTexture(e.TEXTURE0+this.index),e.bindTexture(e.TEXTURE_2D,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1===n.UNPACK_FLIP_Y_WEBGL?0:1),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,n.UNPACK_PREMULTIPLY_ALPHA_WEBGL||0),this.sourceType===t.TextureSourceType.Element)this.source instanceof HTMLImageElement&&this.source.naturalWidth&&this.source.naturalHeight?(this.width=this.source.naturalWidth,this.height=this.source.naturalHeight,e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this.source)):this.source instanceof HTMLVideoElement&&this.source.videoWidth&&this.source.videoHeight?(this.width=this.source.videoWidth,this.height=this.source.videoHeight,e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this.source)):this.source instanceof HTMLCanvasElement&&(this.width=this.source.width,this.height=this.source.height,e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this.source));else if(this.sourceType===t.TextureSourceType.Data){var r=this.source;e.texImage2D(e.TEXTURE_2D,0,e.RGBA,this.width,this.height,0,e.RGBA,e.UNSIGNED_BYTE,r)}this.trigger("loaded",this)}},i.tryUpdate=function(t){var e=!1;return this.animated&&(e=!0,this.update(t,this.options)),e},i.destroy=function(t){this.valid&&(t.deleteTexture(this.texture),this.texture=null,delete this.source,this.source=null,this.valid=!1)},i.setFiltering=function(e,n){if(this.valid){var i=r.isPowerOf2(this.width)&&r.isPowerOf2(this.height),o=n.filtering||t.TextureFilteringType.MipMap,s=n.TEXTURE_WRAP_S||(n.repeat?e.REPEAT:e.CLAMP_TO_EDGE),a=n.TEXTURE_WRAP_T||(n.repeat?e.REPEAT:e.CLAMP_TO_EDGE);i||(o=o===t.TextureFilteringType.MipMap?t.TextureFilteringType.Linear:o,s=a=e.CLAMP_TO_EDGE,(n.repeat||n.TEXTURE_WRAP_S||n.TEXTURE_WRAP_T)&&I.warn("GlslCanvas: cannot repeat texture "+n.url+" cause is not power of 2.")),this.powerOf2=i,this.filtering=o,e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,s),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,a),this.filtering===t.TextureFilteringType.MipMap?(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR_MIPMAP_LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.generateMipmap(e.TEXTURE_2D)):this.filtering===t.TextureFilteringType.Nearest?(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST)):this.filtering===t.TextureFilteringType.Linear&&(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR))}},r}(ut),Et=function(t){function e(){var e;return(e=t.apply(this,arguments)||this).count=0,e.dirty=!1,e.animated=!1,e}n(e,t);var r=e.prototype;return r.clean=function(){var t=this;Object.keys(this.values).forEach((function(e){t.values[e].dirty=!1})),this.dirty=!1},r.createOrUpdate=function(t,e,n,r,i,o){var s,a=this;void 0===r&&(r=0),void 0===i&&(i={});var u=bt.getTextureOptions(n,i);return(s=this.get(e))||(s=new bt(t,e,r+this.count,u,o),this.count++,this.set(e,s)),void 0!==u?s.load(t,u).then((function(e){if(e.source instanceof HTMLVideoElement){var n=e.source;n.addEventListener("play",(function(){e.animated=!0,a.animated=!0})),n.addEventListener("pause",(function(){e.animated=!1,a.animated=a.reduce((function(t,e){return t||e.animated}),!1)})),n.addEventListener("seeked",(function(){e.update(t,e.options),a.dirty=!0}))}return e})):Promise.resolve(s)},e}(z);(xt=t.UniformMethod||(t.UniformMethod={}))[xt.Unknown=0]="Unknown",xt.Uniform1i="uniform1i",xt.Uniform2i="uniform2i",xt.Uniform3i="uniform3i",xt.Uniform4i="uniform4i",xt.Uniform1f="uniform1f",xt.Uniform2f="uniform2f",xt.Uniform3f="uniform3f",xt.Uniform4f="uniform4f",xt.Uniform1iv="uniform1iv",xt.Uniform2iv="uniform2iv",xt.Uniform3iv="uniform3iv",xt.Uniform4iv="uniform4iv",xt.Uniform1fv="uniform1fv",xt.Uniform2fv="uniform2fv",xt.Uniform3fv="uniform3fv",xt.Uniform4fv="uniform4fv",xt.UniformMatrix2fv="uniformMatrix2fv",xt.UniformMatrix3fv="uniformMatrix3fv",xt.UniformMatrix4fv="uniformMatrix4fv",(yt=t.UniformType||(t.UniformType={}))[yt.Unknown=0]="Unknown",yt[yt.Float=1]="Float",yt[yt.Int=2]="Int",yt[yt.Bool=3]="Bool",yt[yt.Sampler2D=4]="Sampler2D",yt[yt.SamplerCube=5]="SamplerCube",yt[yt.Matrix2fv=6]="Matrix2fv",yt[yt.Matrix3fv=7]="Matrix3fv",yt[yt.Matrix4fv=8]="Matrix4fv";var Tt=[t.UniformMethod.Uniform1i,t.UniformMethod.Uniform2i,t.UniformMethod.Uniform3i,t.UniformMethod.Uniform4i],Ut=[t.UniformMethod.Uniform1f,t.UniformMethod.Uniform2f,t.UniformMethod.Uniform3f,t.UniformMethod.Uniform4f],wt=[t.UniformMethod.Uniform1iv,t.UniformMethod.Uniform2iv,t.UniformMethod.Uniform3iv,t.UniformMethod.Uniform4iv],Mt=[t.UniformMethod.Uniform1fv,t.UniformMethod.Uniform2fv,t.UniformMethod.Uniform3fv,t.UniformMethod.Uniform4fv],At=function(e){var n=this;switch(this.dirty=!0,e&&Object.assign(this,e),this.method){case t.UniformMethod.UniformMatrix2fv:case t.UniformMethod.UniformMatrix3fv:case t.UniformMethod.UniformMatrix4fv:this.apply=function(t,e){if(n.dirty){t.useProgram(e);var r=t.getUniformLocation(e,n.key);t[n.method].apply(t,[r,!1].concat(n.values))}};break;default:this.apply=function(t,e){if(n.dirty){t.useProgram(e);var r=t.getUniformLocation(e,n.key);t[n.method].apply(t,[r].concat(n.values))}}}},Lt=function(t){function e(e){return t.call(this,e)||this}return n(e,t),e}(At),Ft=function(e){function r(){var t;return(t=e.apply(this,arguments)||this).dirty=!1,t}n(r,e),r.isArrayOfInteger=function(t){return t.reduce((function(t,e){return t&&Number.isInteger(e)}),!0)},r.isArrayOfNumber=function(t){return t.reduce((function(t,e){return t&&"number"==typeof e}),!0)},r.isArrayOfBoolean=function(t){return t.reduce((function(t,e){return t&&"boolean"==typeof e}),!0)},r.isArrayOfTexture=function(t){return t.reduce((function(t,e){return t&&bt.isTexture(e)}),!0)},r.isArrayOfSampler2D=function(e){return e.reduce((function(e,n){return e&&n.type===t.UniformType.Sampler2D}),!0)},r.getType_=function(e){var n=t.UniformType.Unknown,i=1===e.length&&Array.isArray(e[0])?e[0]:e;return r.isArrayOfNumber(i)?n=t.UniformType.Float:r.isArrayOfBoolean(i)?n=t.UniformType.Bool:r.isArrayOfTexture(i)&&(n=t.UniformType.Sampler2D),n},r.getMethod_=function(e,n){var r=t.UniformMethod.Unknown,i=1===n.length&&Array.isArray(n[0]),o=(i?n[0]:n).length,s=o-1;switch(e){case t.UniformType.Float:r=i?s<Mt.length?Mt[s]:t.UniformMethod.Unknown:s<Ut.length?Ut[s]:t.UniformMethod.Uniform1fv;break;case t.UniformType.Int:case t.UniformType.Bool:r=i?s<wt.length?wt[s]:t.UniformMethod.Unknown:s<Tt.length?Tt[s]:t.UniformMethod.Uniform1iv;break;case t.UniformType.Sampler2D:r=i?t.UniformMethod.Uniform1iv:1===o?t.UniformMethod.Uniform1i:t.UniformMethod.Uniform1iv}return r},r.parseUniform=function(e,n,i){var o;void 0===i&&(i=null),i=i||r.getType_(n);var s=r.getMethod_(i,n);if(i!==t.UniformType.Unknown&&s!==t.UniformMethod.Unknown){if(i===t.UniformType.Sampler2D&&s===t.UniformMethod.Uniform1iv)return n[0].map((function(t,n){return new At({method:s,type:i,key:e+"["+n+"]",values:[t]})}));o=new At({method:s,type:i,key:e,values:n})}else I.error("Uniforms.parseUniform.Unknown",e,n);return o};var i=r.prototype;return i.create=function(t,e,n,r){var i=new At({method:t,type:e,key:n,values:r});return this.set(n,i),this.dirty=!0,i},i.createTexture=function(e,n){var r;return r=-1!==e.indexOf("]")?new Lt({method:t.UniformMethod.Uniform1iv,type:t.UniformType.Sampler2D,key:e,values:[[n]]}):new Lt({method:t.UniformMethod.Uniform1i,type:t.UniformType.Sampler2D,key:e,values:[n]}),this.set(e,r),this.dirty=!0,r},i.update=function(t,e,n,r){var i=this.get(n);i&&(i.method=t,i.type=e,i.values=r,i.dirty=!0,this.dirty=!0)},i.createOrUpdate=function(t,e,n,r){this.has(n)?this.update(t,e,n,r):this.create(t,e,n,r)},i.apply=function(t,e){var n=this;t.useProgram(e),Object.keys(this.values).forEach((function(r){n.values[r].apply(t,e)}))},i.clean=function(){var t=this;Object.keys(this.values).forEach((function(e){t.values[e].dirty=!1})),this.dirty=!1},r.isDifferent=function(t,e){return t.length!==e.length||t.reduce((function(t,n,r){return t||n!==e[r]}),!1)},r}(z),Rt=function(e){function r(){var t;return(t=e.call(this)||this).uniforms=new Ft,t.buffers=new K,t.textures=new Et,t.textureList=[],t.W=0,t.H=0,t.mouse=new $,t.radians=0,t.dirty=!0,t.animated=!1,t.camera=new Z,t.cache={},t.drawFunc_=t.drawArrays_,t}n(r,e);var i=r.prototype;return i.render=function(){var t=this,e=this.gl;if(e){var n=e.drawingBufferWidth,r=e.drawingBufferHeight;this.update_(),e.viewport(0,0,n,r);var i=this.uniforms;Object.keys(this.buffers.values).forEach((function(o){var s=t.buffers.values[o];s.geometry.attachAttributes_(e,s.program),i.apply(e,s.program),s.render(e,n,r)})),this.geometry.attachAttributes_(e,this.program),i.apply(e,this.program),this.drawFunc_(this.timer.delta),i.clean(),this.textures.clean(),this.dirty=!1,this.trigger("render",this)}},i.drawArrays_=function(t){var e=this.gl;e.bindFramebuffer(e.FRAMEBUFFER,null),e.viewport(0,0,this.W,this.H),e.clearColor(0,0,0,1),e.clearDepth(1),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.enable(e.CULL_FACE),this.doubleSided&&this.mode!==B.Flat&&(e.cullFace(e.FRONT),e.drawArrays(e.TRIANGLES,0,this.geometry.size),e.enable(e.BLEND),e.blendFunc(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA)),e.cullFace(e.BACK),e.drawArrays(e.TRIANGLES,0,this.geometry.size)},i.create_=function(){this.createGeometry_(),this.createUniforms_()},i.createGeometry_=function(){this.parseGeometry_(),this.setMode(this.mode)},i.parseGeometry_=function(){var t=/^attribute\s+vec4\s+a_position\s*;\s*\/\/\s*([\w|\:\/\/|\.|\-|\_|\?|\&|\=]+)/gm.exec(this.vertexString);t&&t.length>1?this.mesh=t[1]:this.mesh=this.defaultMesh},i.createUniforms_=function(){var e=this.gl,n=this.fragmentString,r=e.drawingBufferWidth,i=e.drawingBufferHeight,o=this.timer=new st,s=(n.match(/u_delta/g)||[]).length>1,a=(n.match(/u_time/g)||[]).length>1,u=(n.match(/u_date/g)||[]).length>1,c=(n.match(/u_mouse/g)||[]).length>1,h=(n.match(/u_camera/g)||[]).length>1;this.animated=!0;var f=this.uniforms;if(f.create(t.UniformMethod.Uniform2f,t.UniformType.Float,"u_resolution",[r,i]),s?(f.create(t.UniformMethod.Uniform1f,t.UniformType.Float,"u_delta",[o.delta/1e3]),this.updateUniformDelta_=this.updateUniformDelta__):this.updateUniformDelta_=this.updateUniformNoop_,a?(f.create(t.UniformMethod.Uniform1f,t.UniformType.Float,"u_time",[o.current/1e3]),this.updateUniformTime_=this.updateUniformTime__):this.updateUniformTime_=this.updateUniformNoop_,u){var l=new Date;f.create(t.UniformMethod.Uniform4f,t.UniformType.Float,"u_date",[l.getFullYear(),l.getMonth(),l.getDate(),3600*l.getHours()+60*l.getMinutes()+l.getSeconds()+.001*l.getMilliseconds()]),this.updateUniformDate_=this.updateUniformDate__}else this.updateUniformDate_=this.updateUniformNoop_;c?(f.create(t.UniformMethod.Uniform2f,t.UniformType.Float,"u_mouse",[0,0]),this.updateUniformMouse_=this.updateUniformMouse__):this.updateUniformMouse_=this.updateUniformNoop_,h?(f.create(t.UniformMethod.Uniform3f,t.UniformType.Float,"u_camera",[0,0,0]),this.updateUniformCamera_=this.updateUniformCamera__):this.updateUniformCamera_=this.updateUniformNoop_,this.projectionMatrix=et(),f.create(t.UniformMethod.UniformMatrix4fv,t.UniformType.Float,"u_projectionMatrix",this.projectionMatrix),this.modelViewMatrix=et(),f.create(t.UniformMethod.UniformMatrix4fv,t.UniformType.Float,"u_modelViewMatrix",this.modelViewMatrix),this.normalMatrix=et(),f.create(t.UniformMethod.UniformMatrix4fv,t.UniformType.Float,"u_normalMatrix",this.normalMatrix)},i.update_=function(){var e=this.gl,n=e.drawingBufferWidth,r=e.drawingBufferHeight;if(this.timer){var i=this.timer.next();this.uniforms.update(t.UniformMethod.Uniform2f,t.UniformType.Float,"u_resolution",[n,r]),this.updateUniformDelta_(i),this.updateUniformTime_(i),this.updateUniformDate_(),this.updateUniformMouse_(),this.updateUniformCamera_(),this.updateUniformMesh_()}},i.updateUniformNoop_=function(){},i.updateUniformDelta__=function(e){this.uniforms.update(t.UniformMethod.Uniform1f,t.UniformType.Float,"u_delta",[e.delta/1e3])},i.updateUniformTime__=function(e){this.uniforms.update(t.UniformMethod.Uniform1f,t.UniformType.Float,"u_time",[e.current/1e3])},i.updateUniformDate__=function(){var e=this.uniforms,n=new Date;e.update(t.UniformMethod.Uniform4f,t.UniformType.Float,"u_date",[n.getFullYear(),n.getMonth(),n.getDate(),3600*n.getHours()+60*n.getMinutes()+n.getSeconds()+.001*n.getMilliseconds()])},i.updateUniformMouse__=function(){var e=this.uniforms,n=this.mouse;e.update(t.UniformMethod.Uniform2f,t.UniformType.Float,"u_mouse",[n.x,n.y])},i.updateUniformCamera__=function(){var e=this.uniforms,n=Z.toArray(this.camera);e.update(t.UniformMethod.Uniform3f,t.UniformType.Float,"u_camera",n)},i.updateUniformMesh__=function(){var e=this.uniforms;e.update(t.UniformMethod.UniformMatrix4fv,t.UniformType.Float,"u_projectionMatrix",this.updateProjectionMatrix_()),e.update(t.UniformMethod.UniformMatrix4fv,t.UniformType.Float,"u_modelViewMatrix",this.updateModelViewMatrix_(this.timer.delta)),e.update(t.UniformMethod.UniformMatrix4fv,t.UniformType.Float,"u_normalMatrix",this.updateNormalMatrix_(this.modelViewMatrix))},i.updateUniformFlat__=function(){var e=this.uniforms;e.update(t.UniformMethod.UniformMatrix4fv,t.UniformType.Float,"u_projectionMatrix",et()),e.update(t.UniformMethod.UniformMatrix4fv,t.UniformType.Float,"u_modelViewMatrix",et()),e.update(t.UniformMethod.UniformMatrix4fv,t.UniformType.Float,"u_normalMatrix",et())},i.updateProjectionMatrix_=function(){var t=this.gl,e=45*Math.PI/180,n=t.drawingBufferWidth/t.drawingBufferHeight;return function(t,e,n,r,i){var o,s=1/Math.tan(e/2);t[0]=s/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=i&&i!==1/0?(o=1/(r-i),t[10]=(i+r)*o,t[14]=2*i*r*o):(t[10]=-1,t[14]=-2*r)}(this.projectionMatrix,e,n,.1,100),this.projectionMatrix},i.updateModelViewMatrix_=function(t){var e,n,r,i,o,s,a,u,c,h,f,l,d,m,v,p,g,_,y=this.camera,x=this.modelViewMatrix;return e=x=nt(x),n=x,r=[0,0,-y.radius],p=r[0],g=r[1],_=r[2],n===e?(e[12]=n[0]*p+n[4]*g+n[8]*_+n[12],e[13]=n[1]*p+n[5]*g+n[9]*_+n[13],e[14]=n[2]*p+n[6]*g+n[10]*_+n[14],e[15]=n[3]*p+n[7]*g+n[11]*_+n[15]):(i=n[0],o=n[1],s=n[2],a=n[3],u=n[4],c=n[5],h=n[6],f=n[7],l=n[8],d=n[9],m=n[10],v=n[11],e[0]=i,e[1]=o,e[2]=s,e[3]=a,e[4]=u,e[5]=c,e[6]=h,e[7]=f,e[8]=l,e[9]=d,e[10]=m,e[11]=v,e[12]=i*p+u*g+l*_+n[12],e[13]=o*p+c*g+d*_+n[13],e[14]=s*p+h*g+m*_+n[14],e[15]=a*p+f*g+v*_+n[15]),rt(x,x,y.theta+this.radians,[0,1,0]),rt(x,x,y.phi,[1,0,0]),y.mouse||(y.theta+=(0-y.theta)/20,y.phi+=(0-y.phi)/20,this.radians+=5e-4*t),x},i.updateNormalMatrix_=function(t){var e,n,r,i,o,s,a,u,c,h,f,l,d,m,v,p,g,_,y,x,b,E,T,U,w,M,A,L,F,R,S,P=this.normalMatrix;return e=P=nt(P),r=(n=t)[0],i=n[1],o=n[2],s=n[3],a=n[4],u=n[5],c=n[6],h=n[7],f=n[8],l=n[9],d=n[10],m=n[11],v=n[12],p=n[13],g=n[14],_=n[15],(S=(y=r*u-i*a)*(R=d*_-m*g)-(x=r*c-o*a)*(F=l*_-m*p)+(b=r*h-s*a)*(L=l*g-d*p)+(E=i*c-o*u)*(A=f*_-m*v)-(T=i*h-s*u)*(M=f*g-d*v)+(U=o*h-s*c)*(w=f*p-l*v))&&(S=1/S,e[0]=(u*R-c*F+h*L)*S,e[1]=(o*F-i*R-s*L)*S,e[2]=(p*U-g*T+_*E)*S,e[3]=(d*T-l*U-m*E)*S,e[4]=(c*A-a*R-h*M)*S,e[5]=(r*R-o*A+s*M)*S,e[6]=(g*b-v*U-_*x)*S,e[7]=(f*U-d*b+m*x)*S,e[8]=(a*F-u*A+h*w)*S,e[9]=(i*A-r*F-s*w)*S,e[10]=(v*T-p*b+_*y)*S,e[11]=(l*b-f*T-m*y)*S,e[12]=(u*M-a*L-c*w)*S,e[13]=(r*L-i*M+o*w)*S,e[14]=(p*x-v*E-g*y)*S,e[15]=(f*E-l*x+d*y)*S),function(t,e){if(t===e){var n=e[1],r=e[2],i=e[3],o=e[6],s=e[7],a=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=n,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=o,t[11]=e[14],t[12]=i,t[13]=s,t[14]=a}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15]}(P,P),P},i.setMode=function(t){var e,n=this;if(t===B.Mesh&&(e=this.cache[this.mesh]))return this.geometry=e,this.mode=B.Mesh,this.updateUniformMesh_=this.updateUniformMesh__,void(this.dirty=!0);switch(t){case B.Flat:e=new H,this.updateUniformMesh_=this.updateUniformNoop_,this.updateUniformFlat__();break;case B.Box:e=new ct,this.updateUniformMesh_=this.updateUniformMesh__;break;case B.Sphere:e=new ht,this.updateUniformMesh_=this.updateUniformMesh__;break;case B.Torus:e=new ft,this.updateUniformMesh_=this.updateUniformMesh__;break;case B.Mesh:e=new H,this.mesh?(new mt).load(O.getResource(this.mesh,this.workpath)).then((function(t){t.createAttributes_(n.gl,n.program);var e={};e[n.mesh]=t,n.cache=e,n.geometry=t,n.dirty=!0}),(function(t){I.warn("GlslCanvas",t),n.mode=B.Flat})):t=B.Flat,this.updateUniformMesh_=this.updateUniformMesh__}e.create(this.gl,this.program),this.geometry=e,this.mode=t,this.dirty=!0},i.setMesh=function(t){this.mesh=t},r}(ut),St=function(e){function r(t,n){var o;return void 0===n&&(n={}),(o=e.call(this)||this).valid=!1,o.visible=!1,o.controls=!1,o.vertexPath="",o.fragmentPath="",t?(o.options=n,o.canvas=t,o.width=0,o.height=0,o.rect=t.getBoundingClientRect(),o.devicePixelRatio=window.devicePixelRatio||1,o.mode=n.mode||B.Flat,o.mesh=n.mesh||void 0,o.doubleSided=n.doubleSided||!1,o.defaultMesh=o.mesh,o.workpath=n.workpath,t.style.backgroundColor=n.backgroundColor||"rgba(0,0,0,0)",o.getShaders_().then((function(t){o.load().then((function(t){o.program&&(o.addListeners_(),o.onLoop())}))}),(function(t){I.error("GlslCanvas.getShaders_.error",t)})),r.items.push(i(o)),o):i(o)}n(r,e);var o=r.prototype;return o.getShaders_=function(){var t=this;return new Promise((function(e){t.vertexString=t.options.vertexString||t.vertexString,t.fragmentString=t.options.fragmentString||t.fragmentString;var n=t.canvas,r={};n.hasAttribute("data-vertex-url")&&(r.vertex=n.getAttribute("data-vertex-url")),n.hasAttribute("data-fragment-url")&&(r.fragment=n.getAttribute("data-fragment-url")),n.hasAttribute("data-vertex")&&(t.vertexString=n.getAttribute("data-vertex")),n.hasAttribute("data-fragment")&&(t.fragmentString=n.getAttribute("data-fragment")),Object.keys(r).length?Promise.all(Object.keys(r).map((function(e){var n=O.getResource(r[e],t.workpath);return O.fetch(n).then((function(n){var i=O.dirname(r[e]);return"vertex"===e?(t.vertexPath=i,t.vertexString=n):(t.fragmentPath=i,t.fragmentString=n)}))}))).then((function(n){e([t.vertexString,t.fragmentString])})):e([t.vertexString,t.fragmentString])}))},o.addListeners_=function(){this.onScroll=this.onScroll.bind(this),this.onWheel=this.onWheel.bind(this),this.onClick=this.onClick.bind(this),this.onMove=this.onMove.bind(this),this.onMouseDown=this.onMouseDown.bind(this),this.onMouseMove=this.onMouseMove.bind(this),this.onMouseOver=this.onMouseOver.bind(this),this.onMouseOut=this.onMouseOut.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onTouchMove=this.onTouchMove.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onLoop=this.onLoop.bind(this),window.addEventListener("scroll",this.onScroll),document.addEventListener("mousemove",this.onMouseMove,!1),document.addEventListener("touchmove",this.onTouchMove),this.addCanvasListeners_()},o.addCanvasListeners_=function(){this.controls=this.canvas.hasAttribute("controls"),this.canvas.addEventListener("wheel",this.onWheel),this.canvas.addEventListener("click",this.onClick),this.canvas.addEventListener("mousedown",this.onMouseDown),this.canvas.addEventListener("touchstart",this.onTouchStart),this.controls&&(this.canvas.addEventListener("mouseover",this.onMouseOver),this.canvas.addEventListener("mouseout",this.onMouseOut),this.canvas.hasAttribute("data-autoplay")||this.pause())},o.removeCanvasListeners_=function(){this.canvas.removeEventListener("wheel",this.onWheel),this.canvas.removeEventListener("click",this.onClick),this.canvas.removeEventListener("mousedown",this.onMouseDown),this.canvas.removeEventListener("mouseup",this.onMouseUp),this.canvas.removeEventListener("touchstart",this.onTouchStart),this.canvas.removeEventListener("touchend",this.onTouchEnd),this.controls&&(this.canvas.removeEventListener("mouseover",this.onMouseOver),this.canvas.removeEventListener("mouseout",this.onMouseOut))},o.removeListeners_=function(){window.cancelAnimationFrame(this.rafId),window.removeEventListener("scroll",this.onScroll),document.removeEventListener("mousemove",this.onMouseMove),document.removeEventListener("touchmove",this.onTouchMove),this.removeCanvasListeners_()},o.onScroll=function(t){this.rect=this.canvas.getBoundingClientRect()},o.onWheel=function(t){this.camera.wheel(t.deltaY),this.dirty=this.mode!==B.Flat,this.trigger("wheel",t)},o.onClick=function(t){this.controls&&this.toggle(),this.trigger("click",t)},o.onDown=function(t,e){var n=this.rect;t-=n.left,e=n.height-(e-n.top);var r=t*this.devicePixelRatio,i=e*this.devicePixelRatio;this.mouse.x=r,this.mouse.y=i;var o=Math.min(n.width,n.height);this.camera.down(t/o,e/o),this.trigger("down",this.mouse)},o.onMove=function(t,e){var n=this.rect;t-=n.left,e=n.height-(e-n.top);var r=t*this.devicePixelRatio,i=e*this.devicePixelRatio;if(r!==this.mouse.x||i!==this.mouse.y){this.mouse.x=r,this.mouse.y=i;var o=Math.min(n.width,n.height);this.camera.move(t/o,e/o),this.dirty=this.mode!==B.Flat&&null!==this.camera.mouse,this.trigger("move",this.mouse)}},o.onUp=function(t){this.camera.up(),this.controls&&this.pause(),this.trigger("out",t)},o.onMouseDown=function(t){this.onDown(t.clientX,t.clientY),document.addEventListener("mouseup",this.onMouseUp),document.removeEventListener("touchstart",this.onTouchStart),document.removeEventListener("touchmove",this.onTouchMove)},o.onMouseMove=function(t){this.onMove(t.clientX,t.clientY)},o.onMouseUp=function(t){this.onUp(t)},o.onMouseOver=function(t){this.play(),this.trigger("over",t)},o.onMouseOut=function(t){this.pause(),this.trigger("out",t)},o.onTouchStart=function(t){var e=[].slice.call(t.touches).reduce((function(t,e){return(t=t||new $).x+=e.clientX,t.y+=e.clientY,t}),null);e&&this.onDown(e.x/t.touches.length,e.y/t.touches.length),this.controls&&this.play(),this.trigger("over",t),document.addEventListener("touchend",this.onTouchEnd),document.removeEventListener("mousedown",this.onMouseDown),document.removeEventListener("mousemove",this.onMouseMove),this.controls&&(this.canvas.removeEventListener("mouseover",this.onMouseOver),this.canvas.removeEventListener("mouseout",this.onMouseOut))},o.onTouchMove=function(t){var e=[].slice.call(t.touches).reduce((function(t,e){return(t=t||new $).x+=e.clientX,t.y+=e.clientY,t}),null);e&&this.onMove(e.x/t.touches.length,e.y/t.touches.length)},o.onTouchEnd=function(t){this.onUp(t),document.removeEventListener("touchend",this.onTouchEnd)},o.onLoop=function(t){this.checkRender(),this.rafId=window.requestAnimationFrame(this.onLoop)},o.setUniform_=function(e,n,r,i){var o=this;void 0===r&&(r={}),void 0===i&&(i=null);var s=Ft.parseUniform(e,n,i);if(Array.isArray(s))Ft.isArrayOfSampler2D(s)?s.forEach((function(t){return o.loadTexture(t.key,t.values[0],r)})):s.forEach((function(t){return o.uniforms.set(t.key,t.values[0])}));else if(s)switch(s.type){case t.UniformType.Sampler2D:this.loadTexture(e,n[0],r);break;default:this.uniforms.set(e,s)}},o.isVisible_=function(){var t=this.rect;return t.top+t.height>0&&t.top<(window.innerHeight||document.documentElement.clientHeight)},o.isAnimated_=function(){return(this.animated||this.textures.animated||this.mode!==B.Flat)&&!this.timer.paused},o.isDirty_=function(){return this.dirty||this.uniforms.dirty||this.textures.dirty},o.sizeDidChanged_=function(){var t=this,e=this.gl,n=Math.ceil(this.canvas.clientWidth),r=Math.ceil(this.canvas.clientHeight);if(this.width!==n||this.height!==r){this.width=n,this.height=r;var i=Math.ceil(n*this.devicePixelRatio),o=Math.ceil(r*this.devicePixelRatio);return this.W=i,this.H=o,this.canvas.width=i,this.canvas.height=o,Object.keys(this.buffers.values).forEach((function(n){t.buffers.values[n].resize(e,i,o)})),this.rect=this.canvas.getBoundingClientRect(),this.trigger("resize"),!0}return!1},o.parseTextures_=function(t){for(var e,n=this,r=/uniform\s*sampler2D\s*([\w]*);(\s*\/\/\s*([\w|\:\/\/|\.|\-|\_|\?|\&|\=]*)|\s*)/gm;null!==(e=r.exec(t));){var i=e[1],o=e[3];bt.isTextureUrl(o)?this.textureList.push({key:i,url:o}):this.buffers.has(i)||this.textureList.push({key:i,url:null})}return this.canvas.hasAttribute("data-textures")&&this.canvas.getAttribute("data-textures").split(",").forEach((function(t,e){var r="u_texture"+e;n.textureList.push({key:r,url:t})})),this.textureList.length>0},o.load=function(t,e){var n=this,r=N.getFragmentVertex(this.gl,t||this.fragmentString);return Promise.all([N.getIncludes(t||this.fragmentString,""===this.fragmentPath?this.workpath:this.fragmentPath),N.getIncludes(r||e||this.vertexString,""===this.vertexPath?this.workpath:this.vertexPath)]).then((function(t){return n.fragmentString=t[0],n.vertexString=t[1],n.createContext_()}))},o.getContext_=function(){var t=this.vertexString,e=this.fragmentString;if(this.vertexString=N.getVertex(t,e,this.mode),this.fragmentString=N.getFragment(t,e,this.mode),N.versionDiffers(this.gl,t,e)&&(this.destroyContext_(),this.swapCanvas_(),this.uniforms=new Ft,this.buffers=new K,this.textures=new Et,this.textureList=[]),!this.gl){var n=N.tryInferContext(t,e,this.canvas,this.options,this.options.extensions,this.options.onError);if(!n)return null;this.gl=n}return this.gl},o.createContext_=function(){var t,e,n=this.getContext_();if(!n)return!1;try{if(N.inferPrecision(this.fragmentString),t=N.createShader(n,this.vertexString,n.VERTEX_SHADER),e=N.createShader(n,this.fragmentString,n.FRAGMENT_SHADER))this.valid=!0;else{var r=N.getFragment(null,null,this.mode);e=N.createShader(n,r,n.FRAGMENT_SHADER),this.valid=!1}}catch(t){return this.trigger("error",t),!1}var i=N.createProgram(n,[t,e]);if(!i)return this.trigger("error",N.lastError),!1;if(n.deleteShader(t),n.deleteShader(e),this.program=i,this.valid){try{this.buffers=K.getBuffers(n,this.fragmentString,N.getBufferVertex(n))}catch(t){return this.valid=!1,this.trigger("error",t),!1}this.create_(),this.animated?this.canvas.classList.add("animated"):this.canvas.classList.remove("animated")}return this.trigger("load",this),this.valid},o.create_=function(){this.parseMode_(),this.parseMesh_(),e.prototype.create_.call(this),this.createBuffers_(),this.createTextures_()},o.parseMode_=function(){if(this.canvas.hasAttribute("data-mode")){var t=this.canvas.getAttribute("data-mode");-1!==["flat","box","sphere","torus","mesh"].indexOf(t)&&(this.mode=t)}},o.parseMesh_=function(){if(this.canvas.hasAttribute("data-mesh")){var t=this.canvas.getAttribute("data-mesh");-1!==t.indexOf(".obj")&&(this.mesh=this.defaultMesh=t)}},o.createBuffers_=function(){var e=this;Object.keys(this.buffers.values).forEach((function(n){var r=e.buffers.values[n];e.uniforms.create(t.UniformMethod.Uniform1i,t.UniformType.Sampler2D,r.key,[r.input.index])}))},o.createTextures_=function(){var t=this;this.parseTextures_(this.fragmentString)&&(this.textureList.filter((function(t){return t.url})).forEach((function(e){t.setTexture(e.key,e.url,e.options)})),this.textureList=[])},o.update_=function(){e.prototype.update_.call(this),this.updateBuffers_(),this.updateTextures_()},o.updateBuffers_=function(){var e=this;Object.keys(this.buffers.values).forEach((function(n){var r=e.buffers.values[n];e.uniforms.update(t.UniformMethod.Uniform1i,t.UniformType.Sampler2D,r.key,[r.input.index])}))},o.updateTextures_=function(){var e=this,n=this.gl;Object.keys(this.textures.values).forEach((function(r){var i=e.textures.values[r];i.tryUpdate(n),e.uniforms.update(t.UniformMethod.Uniform1i,t.UniformType.Sampler2D,i.key,[i.index])}))},o.destroyContext_=function(){var t=this,e=this.gl;e.useProgram(null),this.program&&e.deleteProgram(this.program),Object.keys(this.buffers.values).forEach((function(n){t.buffers.values[n].destroy(e)})),Object.keys(this.textures.values).forEach((function(n){t.textures.values[n].destroy(e)})),this.buffers=null,this.textures=null,this.uniforms=null,this.program=null,this.gl=null},o.swapCanvas_=function(){var t=this.canvas,e=t.cloneNode();t.parentNode.replaceChild(e,t),this.canvas=e,this.addCanvasListeners_()},o.destroy=function(){this.removeListeners_(),this.destroyContext_(),this.animated=!1,this.valid=!1;var t=r.items.indexOf(this);-1!==t&&r.items.splice(t,1)},o.loadTexture=function(e,n,r){var i=this;void 0===r&&(r={}),this.valid?this.textures.createOrUpdate(this.gl,e,n,this.buffers.count,r,this.options.workpath).then((function(n){var r=n.index;i.uniforms.createTexture(e,r).texture=n;var o=-1!==e.indexOf("[")?e.replace("[","Resolution["):e+"Resolution";return i.uniforms.create(t.UniformMethod.Uniform2f,t.UniformType.Float,o,[n.width,n.height]),n}),(function(t){var r=Array.isArray(t.path)?t.path.map((function(t){return t.error?t.error.message:""})).join(", "):t.message;I.error("GlslCanvas.loadTexture.error",e,n,r),i.trigger("textureError",{key:e,urlElementOrData:n,message:r})})):this.textureList.push({key:e,url:n,options:r})},o.setTexture=function(t,e,n){return void 0===n&&(n={}),this.setUniform_(t,[e],n)},o.setUniform=function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return this.setUniform_(t,n)},o.setUniformOfInt=function(e,n){return this.setUniform_(e,n,null,t.UniformType.Int)},o.setUniforms=function(t){var e=this;Object.keys(t).forEach((function(n){e.setUniform(n,t[n])}))},o.pause=function(){this.valid&&(this.timer.pause(),this.canvas.classList.add("paused"),this.trigger("pause"))},o.play=function(){this.valid&&(this.timer.play(),this.canvas.classList.remove("paused"),this.trigger("play"))},o.toggle=function(){this.valid&&(this.timer.paused?this.play():this.pause())},o.checkRender=function(){this.isVisible_()&&(this.sizeDidChanged_()||this.isDirty_()||this.isAnimated_())?(this.render(),this.canvas.classList.add("playing")):this.canvas.classList.remove("playing")},r}(Rt);function Pt(t,e){return St.items.find((function(e){return e.canvas===t}))||new St(t,e)}function Ot(){return[].slice.call(document.getElementsByClassName("glsl-canvas")).filter((function(t){return t instanceof HTMLCanvasElement})).map((function(t){return Pt(t)}))}St.items=[],document&&document.addEventListener("DOMContentLoaded",(function(){Ot()})),t.BoxGeometry=ct,t.Buffer=Y,t.Buffers=K,t.Canvas=St,t.CanvasTimer=st,t.Common=O,t.Context=N,t.ContextVertexBuffers=j,t.DefaultWebGL2BufferFragment=b,t.DefaultWebGL2BufferVertex=y,t.DefaultWebGL2FlatFragment=v,t.DefaultWebGL2MeshFragment=g,t.DefaultWebGL2MeshVertex=d,t.DefaultWebGLBufferFragment=x,t.DefaultWebGLBufferVertex=_,t.DefaultWebGLFlatFragment=m,t.DefaultWebGLMeshFragment=p,t.DefaultWebGLMeshVertex=l,t.FlatGeometry=H,t.Geometry=X,t.IOBuffer=q,t.IterableStringMap=z,t.Listener=at,t.Logger=I,t.METHODS_FLOAT=Ut,t.METHODS_FLOATV=Mt,t.METHODS_INT=Tt,t.METHODS_INTV=wt,t.ObjLoader=mt,t.OrbitCamera=Z,t.Renderer=Rt,t.SphereGeometry=ht,t.Subscriber=ut,t.Texture=bt,t.TextureExtensions=gt,t.TextureImageExtensions=vt,t.TextureVideoExtensions=pt,t.Textures=Et,t.TorusGeometry=ft,t.Uniform=At,t.UniformTexture=Lt,t.Uniforms=Ft,t.Vector2=$,t.Vector3=J,t.isTextureData=_t,t.loadAll=Ot,t.of=Pt,Object.defineProperty(t,"__esModule",{value:!0})}(e)},706:(t,e,n)=>{var r=n(187).EventEmitter;t.exports=function(){var t=new r,e=[],n=null,i=null;t.tap=function(){var r=Date.now();n&&(i=r-n,e.push(i),function(){if(e.length>2){var n=1/(e.reduce((function(t,e){return t+e}))/e.length/1e3)*60;t.emit("tempo",n)}}()),n=r,clearTimeout(o),o=setTimeout((function(){e=[i],n=null}),2e3),t.emit("tap")};var o=null;return t}},936:t=>{t.exports="#ifdef GL_ES\n    precision mediump float;\n    #endif\n    \n    uniform vec2 u_resolution;\n    uniform vec2 u_mouse;\n    uniform float u_time;\n    uniform float u_low;\n    \n    vec2 uvN(){\n        vec2 pos = gl_FragCoord.xy/u_resolution;\n        pos.x *= u_resolution.x/u_resolution.y;\n        pos = pos *2.-1.;\n        return pos;\n    }\n    \n    void main() {\n        vec2 pos = uvN();\n    \n        float dx = distance(pos.x,0.5); \n        float dy = distance(pos.y,0.);\n        \n        vec3 color;\n        color = vec3(dx/cos(pos.y)/sin(u_time)+0.5,0.,dy/cos(pos.y)/cos(u_time));\n    \n        gl_FragColor = vec4(color,1.0);\n    }"},636:t=>{t.exports='#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\nuniform float u_low;\nuniform float u_bpm;\n\n#include "lygia/space/ratio.glsl"\n#include "lygia/generative/snoise.glsl"\n#include "lygia/draw/rect.glsl"\n#include "lygia/color/hueShift.glsl"\n\nfloat sinbpm = sin(u_time * PI * (u_bpm / 60.));\nfloat sinbpm4 = sin(u_time * PI * (u_bpm / 60.) /  8.);\nfloat cosbpm4 = sin(u_time * PI * (u_bpm / 60.) /  8.);\n\nvec2 position() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    st = ratio(st,u_resolution);\n    st = st *2.-1.;\n    return st;\n}\n\nvec3 colorA = vec3(0.7,0.,sinbpm4 * 2.);\nvec3 colorB = vec3(u_low / 155.,abs(sinbpm4), 0.2);\n\nvoid main() {\n    vec2 st = position();\n\n    float square = rect(st + vec2(.5,.5), vec2(1.2));\n\n    square *= snoise(vec3(st * (u_low / 120.) , u_time));\n\n    float radio = distance(st, vec2(0.));\n    float angulo = atan(st.y * sinbpm4,st.x);\n    \n    vec2 polar = vec2(radio, angulo);\n\n    vec3 strips = vec3(smoothstep(0.3,0.5,abs(sin(polar.y * u_low / 155.-u_low / 255.))));\n    vec3 growCircle = vec3(smoothstep(0.0,1.,abs(sin(polar.x * u_low / 155.-u_low / 255.)) * 1.));\n\n    vec3 color = square + mix(colorA, colorB, growCircle) * 2.;\n\n    gl_FragColor = vec4(color,1.0);\n}'},478:t=>{t.exports='\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2    u_resolution;\nuniform float   u_time;\n\n#include "lygia/space/ratio.glsl"\n#include "lygia/draw/cross.glsl"\n#include "lygia/draw/circle.glsl"\n#include "lygia/draw/rect.glsl"\n\nvoid main(void) {\n    vec3 color = vec3(0.0);\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    st = ratio(st, u_resolution);\n\n    \n\n    color += circle(st, .5, .1) + circle(st, .1, .2);\n\n    \n    gl_FragColor = vec4(color, 1.0);\n}'},763:t=>{t.exports="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\nuniform float u_low;\n\nvec3 colorA = vec3(0.4,0.,0.6);\nvec3 colorB = vec3(1.,0.2,0.0);\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    vec3 pct = vec3(st.x, st.x, st.x);\n\n    pct.r = smoothstep(0.,1.0, abs(sin(st.x - u_time)));\n    pct.g =  abs(tan(st.x * (st.y + sin(u_time)) * PI + u_time) * 0.8)  ;\n    pct.b = abs(sin(st.y * (sin(u_time * 0.15) * 20.)) );\n\n   color = mix(colorA, colorB, pct);\n\n    gl_FragColor = vec4(color,1.0);\n}"},413:t=>{t.exports='#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\nuniform float u_low;\nuniform float u_bpm;\n\n#include "lygia/draw/rect.glsl"\n#include "lygia/draw/circle.glsl"\n#include "lygia/space/ratio.glsl"\n#include "lygia/color/blend/softLight.glsl"\n\nfloat sinbpm = sin(u_time * PI * (u_bpm / 60.));\nfloat sinbpm4 = sin(u_time * PI * (u_bpm / 60.) /  4.);\nfloat cosbpm4 = sin(u_time * PI * (u_bpm / 60.) /  4.);\n\nvec3 colorA = vec3(u_low / 255.,0.0,u_low / 255.);\nvec3 colorB = vec3(u_low / 255.,0.0,0.0);\nvec3 colorC = vec3(.1,.1,.4);\nvec3 colorD = vec3(0.0,u_low / 455.,0.0);\n\n\nfloat plot (vec2 st, float pct){\n  return  smoothstep( pct-0.01, pct, st.y) -\n          smoothstep( pct, pct+0.01, st.y);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n    st = ratio(st,u_resolution);\n\n\n\n    vec3 pct = vec3(st.x);\n\n    pct.g = smoothstep(0.0,u_low / 255.,st.y / (abs(sin(st.x * (sin(u_time * 0.01) * 50.))) + 1.0)) * 2.;\n    pct.b = smoothstep(0.0,u_low / 255.,st.x / (abs(sin(st.y * (sin(u_time * 0.01) * 50.))) + 1.0)) * 2.;\n\n     vec3 backgr = mix(colorA, colorB, st.y + sin(u_time));\n     vec3 cross1 = rect(st, .6) - colorD * 2.;\n     vec3 circle1 = circle(st, .7) - colorD;\n     vec3 spines1 = vec3(pct.g * clamp(abs(sinbpm4), 0.4, 0.9 ))  - vec3(0.,.5,.2)  ;\n     vec3 spines2 = vec3(pct.b * clamp(abs(sinbpm4), 0.4, 0.5 ))  - vec3(0.,.5,1.) ;\n\n     color =  (spines1 + spines2) + backgr * .7 ;\n    gl_FragColor = vec4(color,1.0);\n}'},152:t=>{t.exports='#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\nuniform float u_low;\nuniform float u_bpm;\n\n#include "lygia/draw/rect.glsl"\n#include "lygia/draw/circle.glsl"\n#include "lygia/space/ratio.glsl"\n\nvec3 colorA = vec3(0.4,0.,0.6);\nvec3 colorB = vec3(1.,0.2,0.0);\nvec3 colorC = vec3(1.,0.0,0.0);\nvec3 colorD = vec3(0.0,u_low / 455.,u_low / 455.);\n\n\nfloat plot (vec2 st, float pct){\n  return  smoothstep( pct-0.01, pct, st.y) -\n          smoothstep( pct, pct+0.01, st.y);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n    st = ratio(st,u_resolution);\n\n    vec3 pct = vec3(st.x, st.x, st.x);\n\n    float sinbpm = sin(u_time * PI * (u_bpm / 60.));\n\n   // pct.r = smoothstep(0.,1.0, abs(sin(st.x - u_time)));\n // pct.g =  abs(tan(st.x * (st.y + sin(u_time)) * PI + u_time) * 0.8)  ;\n    pct.g =  abs(tan(st.x * (st.y + sin(u_time)) * PI + u_time) * (abs(sinbpm)) * 0.8)  ;\n    pct.r = abs(sin(st.y + u_low * 0.04));\n   // pct.b = abs(sin(st.y * (sin(u_time * 0.15) * 20.)) );\n\n   // color = mix(colorA, colorB, pct);\n     vec3 square = (rect(st, vec2(.95, .8)) - colorB);\n     color = square + vec3(pct.g,pct.g,0.0) - vec3(0.0,pct.r,pct.r);\n\n\n//abs(sin(u_time * PI * (u_bpm / 60.)))\n\n    // Plot transition lines for each channel\n    //color = mix(color,vec3(1.0,0.0,0.0),plot(st,pct.r));\n    //color = mix(color,vec3(0.0,1.0,0.0),plot(st,pct.g));\n    //color = mix(color,vec3(0.0,0.0,1.0),plot(st,pct.b));\n\n    gl_FragColor = vec4(color,1.0);\n}'},649:()=>{}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r].call(o.exports,o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";function t(t){"hidden"==t.style.visibility?t.style.visibility="visible":t.style.visibility="hidden"}var e=n(135),r=n(946);class i{constructor(t,e,n){this.sketches={0:()=>n(),1:()=>function(t,e){src(o0).modulate(noise((()=>1-e[0]/20),.5),(()=>t[7]/10)).colorama((()=>t[11]/100)).hue((()=>t[10])).scale(1.01).blend(s1,.2).out()}(t,e),2:()=>function(t){src(o0).color(1,1,1,.9).modulate(s1,2e-4).blend(o0,(()=>t[11])).saturate([1.1,1,2].smooth(.9).fast(.5)).scale((()=>t[10])).layer(src(s1).luma((()=>t[7]))).out()}(t),3:()=>function(t,e){src(o0).hue(.9).color(.9,.9,.99,.9).brightness(.05).modulate(noise((()=>e[3]),.5),(()=>t[11])).modulate(voronoi((()=>10*e[0]),1),(()=>t[11])).blend(o0,(()=>t[10]-.1)).scale(1.001).layer(src(s1).luma((()=>t[7]+.1))).out()}(t,e),4:()=>function(t,e){solid(0).layer(src(s1).modulate(noise((()=>e[0]/255*(20*t[1])),1)).luma((()=>e[3]/255+t[7]+.1)).invert().color(.9,.8,.2).scale(1.1).scrollX(.99).scrollY(1)).mask(shape(4,1)).layer(src(s1).modulate(o0,(()=>t[10]-.01)).hue((()=>2*t[10])).scale((()=>t[10]+1)).luma((()=>t[11]+.1))).blend(o0,(()=>t[91]-.1)).out()}(t,e),5:()=>{src(o0).color(1,1,1,.8).modulate(s1,.002).blend(o0,.9).layer(src(s1)).out()}}}runSketch(t){this.sketches[t]&&this.sketches[t]()}}var o=n(936),s=n.n(o),a=n(478),u=n.n(a),c=n(763),h=n.n(c),f=n(413),l=n.n(f),d=n(152),m=n.n(d),v=n(636),p=n.n(v);class g{constructor(t){this.frags={q:s(),w:u(),e:m(),r:h(),a:l(),s:p(),p:()=>t.playPause(),o:()=>t.hideShow()},this.load=t.load}runFrag(t){if(this.frags[t])switch(t){case"p":case"o":this.frags[t]();break;default:this.load(this.frags[t])}}}var _=n(649),y=n.n(_);class x{constructor(t){this.programs={c:()=>t.playPause(),z:()=>y()()},this.onResults=t.onResults}runProgram(t){if(this.programs[t])switch(t){case"c":this.programs[t]();break;default:this.onResults(this.programs[t])}}}const b={width:1280,height:1024};!async function(){const o=await async function(t){if(navigator.mediaDevices)return await navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then((t=>t))}(),s=function(t,n,r){const i=t.createElement("video");i.id="camera",i.width=n.width,i.height=n.height;const o=t.createElement("canvas");o.id="pose-canvas",o.width=n.width,o.height=n.height;const s=o.getContext("2d"),a=new Pose({locateFile:t=>`https://cdn.jsdelivr.net/npm/@mediapipe/pose/${t}`});return a.setOptions({modelComplexity:1,smoothLandmarks:!0,enableSegmentation:!0,smoothSegmentation:!0,minDetectionConfidence:.7,minTrackingConfidence:.6,selfieMode:!0}),a.onResults((function(t){s.save(),s.clearRect(0,0,o.width,o.height),t.segmentationMask&&(s.drawImage(t.segmentationMask,0,0,o.width,o.height),s.globalCompositeOperation="source-in",s.drawImage(t.image,0,0,o.width,o.height),s.restore())})),new e.Camera(i,{onFrame:async()=>{await a.send({image:i})},width:n.width/2,height:n.height/2}).start(),{poseSegmentation:o,runProgram:t=>a.onResults(t),playPause:()=>{i.paused?i.play():i.pause()}}}(document,b),a=function(t){const e=new AudioContext,n=e.createMediaStreamSource(t),r=e.createGain(),i=e.createBiquadFilter(),o=e.createAnalyser();o.fftSize=512,o.smoothingTimeConstant=.9,n.connect(o),n.connect(r),r.value=1,r.connect(i);const s=new Uint8Array(o.frequencyBinCount);return function t(){requestAnimationFrame(t),o.getByteFrequencyData(s)}(),{start:function(){e.resume(),n.play()},filterFrequency:function(t){i.frequency.value=t},dataArray:s}}(o),u=function(){navigator.requestMIDIAccess().then((function(t){for(var n of(console.log(t),t.inputs,t.outputs,t.inputs.values()))n.onmidimessage=e}),(function(){console.log("Could not access your MIDI devices.")}));var t=Array(128).fill(.5);const e=function(e){var n=e.data,r=n[1],i=(n[2]+1)/128;t[r]=i};return{cc:t}}(),c=function(){const t=n(706)();let e=[120];return t.on("tempo",(function(t){e[0]=t})),{bpm:e,tap:()=>t.tap()}}(),h=function(e,n,i,o){const s=e.createElement("canvas");s.width=n.width,s.height=n.height,s.id="shadercanvas",e.body.appendChild(s);const a=new r.Canvas(s,{alpha:!1,antialias:!0,mode:"flat",extensions:["EXT_shader_texture_lod"]});return a.on("render",(()=>{a.setUniform("u_low",i[0]),a.setUniform("u_bpm",o.bpm[0])})),{canvas:s,load:t=>a.load(t),playPause:()=>a.toggle(),hideShow:()=>t(s)}}(document,b,a.dataArray,c),f=function(e,n,r,i){const o=e.createElement("canvas");return o.id="hydracanvas",o.width=i.width,o.height=i.height,e.body.appendChild(o),new Hydra({detectAudio:!1,canvas:o,autoLoop:!0}),s0.init({src:n}),s1.init({src:r}),fps=60,{hideShow:()=>t(o)}}(document,s.poseSegmentation,h.canvas,b),l=new i(u.cc,a.dataArray,f.hideShow),d=new g(h),m=new x(s);!function(t,e,n,r,i,o){t.getElementById("hydracanvas").addEventListener("click",(()=>{})),t.addEventListener("keydown",(t=>{"c"==t.key&&o.runProgram(t.key),"t"==t.key&&n(),/^[0-9]$/i.test(t.key)?r.runSketch(t.key):i.runFrag(t.key)}))}(document,0,c.tap,l,d,m)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,